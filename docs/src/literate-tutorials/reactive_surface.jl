# # [Reactive Surface](@id tutorial-reactive-surface)
#
# ![](reactive_surface.gif)
#
# *Figure 1*: Reactant concentration field of the Gray-Scott model on the unit sphere.
#
#-
#md # !!! tip
#md #     This example is also available as a Jupyter notebook:
#md #     [`reactive_surface.ipynb`](@__NBVIEWER_ROOT_URL__/examples/reactive_surface.ipynb).
#-
#
# ## Introduction
#
# This tutorial gives a quick tutorial on how to assemble and solve time-dependent problems
# on embedded surfaces.
#
# For this showcase we use the well known Gray-Scott model, which is a well-known reaction-diffusion
# system to study pattern formation. The strong form is given by
#
# ```math
#  \partial_t r_1 = \nabla \cdot (D_1 \nabla r_1) - r₁*r₂^2 + F *(1 - r₁) \quad \textbf{x} \in \Omega,
#  \partial_t r_2 = \nabla \cdot (D_2 \nabla r_2) + r₁*r₂^2 - r₂*(F + k ) \quad \textbf{x} \in \Omega,
# ```
#
# where $r_1$ and $r_2 are the reaction fields, $D_1$ and $D_2$ the diffusion tensors,
# $k$ is the conversion rate, $F$ is the feed rate and $\Omega$ the domain. Depending on the choice of
# parameters a different pattern can be observed. Please also note that the domain does not have a 
# boundary. The corresponding weak form can be derived as usual.
#
# For simplicity we will solve the problem with the Lie-Troter-Godunov operator splitting technique with
# the classical reaction-diffusion split. In this method we split our problem in two problems, i.e. a heat
# problem and a pointwise reaction problem, and solve them alternatingly to advance in time.
#
#-
# ## Commented Program
#
# Now we solve the problem in Ferrite. What follows is a program spliced with comments.
#md # The full program, without comments, can be found in the next [section](@ref reactive_surface-plain-program).
#
# First we load Ferrite, and some other packages we need

using Ferrite
using BlockArrays, SparseArrays, LinearAlgebra

# ### Assembly routines
# The following assembly routines are similar to these found in previous tutorials.

function assemble_element_mass!(Me::Matrix, cellvalues::CellValues)
    n_basefuncs = getnbasefunctions(cellvalues)
    ## Reset to 0
    fill!(Me, 0)
    ## Loop over quadrature points
    for q_point in 1:getnquadpoints(cellvalues)
        ## Get the quadrature weight
        dΩ = getdetJdV(cellvalues, q_point)
        ## Loop over test shape functions
        for i in 1:n_basefuncs
            δuᵢ = shape_value(cellvalues, q_point, i)
            ## Loop over trial shape functions
            for j in 1:n_basefuncs
                δuⱼ = shape_value(cellvalues, q_point, j)
                ## Add contribution to Ke
                Me[2*i-1, 2*j-1] += (δuᵢ * δuⱼ) * dΩ
                Me[2*i  , 2*j  ] += (δuᵢ * δuⱼ) * dΩ
            end
        end
    end
    return nothing
end

function assemble_element_diffusion!(De::Matrix, cellvalues::CellValues)
    n_basefuncs = getnbasefunctions(cellvalues)
    ## Reset to 0
    fill!(De, 0)
    ## Loop over quadrature points
    for q_point in 1:getnquadpoints(cellvalues)
        ## Get the quadrature weight
        dΩ = getdetJdV(cellvalues, q_point)
        ## Loop over test shape functions
        for i in 1:n_basefuncs
            ∇δuᵢ = shape_gradient(cellvalues, q_point, i)
            ## Loop over trial shape functions
            for j in 1:n_basefuncs
                ∇δuⱼ = shape_gradient(cellvalues, q_point, j)
                ## Add contribution to Ke
                De[2*i-1, 2*j-1] += 2*0.00008 * (∇δuᵢ ⋅ ∇δuⱼ) * dΩ
                De[2*i  , 2*j  ] += 2*0.00004 * (∇δuᵢ ⋅ ∇δuⱼ) * dΩ
            end
        end
    end
    return nothing
end

function assemble_matrices!(M::SparseMatrixCSC, D::SparseMatrixCSC, cellvalues::CellValues, dh::DofHandler)
    n_basefuncs = getnbasefunctions(cellvalues)

    ## Allocate the element stiffness matrix and element force vector
    Me = zeros(2*n_basefuncs, 2*n_basefuncs)
    De = zeros(2*n_basefuncs, 2*n_basefuncs)

    ## Create an assembler
    M_assembler = start_assemble(M)
    D_assembler = start_assemble(D)
    ## Loop over all cels
    for cell in CellIterator(dh)
        ## Reinitialize cellvalues for this cell
        reinit!(cellvalues, cell)
        ## Compute element contribution
        assemble_element_mass!(Me, cellvalues)
        assemble!(M_assembler, celldofs(cell), Me)

        assemble_element_diffusion!(De, cellvalues)
        assemble!(D_assembler, celldofs(cell), De)
    end
    return nothing
end

# ### Initial condition setup
# Time-dependent problems always need an initial condition from which the time evolution starts.
# In this tutorial we set the concentration of reactant 1 to $1$ and the concentration of reactant
# 2 to $0$ for all nodal dof with associated coordinate $z \leq 0.9$ on the sphere. Since the
# simulation would be pretty boring with a steady-state initial condition, we introduce some
# heterogeneity by setting the dofs associated to top part of the sphere (i.e. dofs with $z > 0.9$
# to store the reactant concentrations of $0.5$ and $0.25$ for the reactants 1 and 2 respectively.
function setup_initial_conditions!(u₀::Vector, cellvalues::CellValues, dh::DofHandler)
    u₀ .= ones(ndofs(dh))
    u₀[2:2:end] .= 0.0

    n_basefuncs = getnbasefunctions(cellvalues)

    for cell in CellIterator(dh)
        reinit!(cellvalues, cell)

        coords = getcoordinates(cell)
        dofs = celldofs(cell)
        uₑ = @view u₀[dofs]
        rv₀ₑ = reshape(uₑ, (2, n_basefuncs))

        for i in 1:n_basefuncs            
            if coords[i][3] > 0.9
                rv₀ₑ[1, i] = 0.5
                rv₀ₑ[2, i] = 0.25
            end
        end
    end

    u₀ .+= 0.01*rand(ndofs(dh))
end

# ### Simulation routines
# Now we define a function to setup and solve the problem with given feed and conversion rates
# $F$ and $k$, as well as the time step length and for how long we want to solve the model.
function gray_scott_sphere(F, k, Δt, T)

# TODO replace with actual mesh generator
# try
# togrid("/home/dogiermann/untitled.msh")
# catch
# end
# nodes = tonodes();
# elements, gmsh_elementidx = toelements(2);

# elements = QuadraticTriangle[QuadraticTriangle((86, 139, 121, 173, 174, 175)), QuadraticTriangle((121, 148, 86, 176, 177, 175)), QuadraticTriangle((101, 127, 126, 178, 179, 180)), QuadraticTriangle((55, 124, 119, 181, 182, 183)), QuadraticTriangle((44, 132, 58, 184, 185, 186)), QuadraticTriangle((55, 119, 56, 183, 187, 188)), QuadraticTriangle((126, 127, 68, 179, 189, 190)), QuadraticTriangle((110, 156, 2, 191, 192, 193)), QuadraticTriangle((5, 31, 28, 194, 195, 196)), QuadraticTriangle((56, 170, 108, 197, 198, 199)), QuadraticTriangle((81, 156, 109, 200, 201, 202)), QuadraticTriangle((37, 132, 44, 203, 184, 204)), QuadraticTriangle((59, 112, 40, 205, 206, 207)), QuadraticTriangle((48, 135, 134, 208, 209, 210)), QuadraticTriangle((22, 156, 81, 211, 200, 212)), QuadraticTriangle((54, 113, 55, 213, 214, 215)), QuadraticTriangle((134, 135, 123, 209, 216, 217)), QuadraticTriangle((108, 136, 56, 218, 219, 199)), QuadraticTriangle((4, 31, 5, 220, 194, 14)), QuadraticTriangle((90, 144, 117, 221, 222, 223)), QuadraticTriangle((30, 46, 23, 224, 225, 226)), QuadraticTriangle((122, 170, 56, 227, 197, 228)), QuadraticTriangle((22, 31, 4, 229, 220, 230)), QuadraticTriangle((90, 124, 113, 231, 232, 233)), QuadraticTriangle((31, 131, 28, 234, 235, 195)), QuadraticTriangle((58, 132, 112, 185, 236, 237)), QuadraticTriangle((119, 122, 56, 238, 228, 187)), QuadraticTriangle((10, 30, 23, 239, 226, 240)), QuadraticTriangle((3, 22, 4, 241, 230, 13)), QuadraticTriangle((54, 131, 113, 242, 243, 213)), QuadraticTriangle((96, 158, 118, 244, 245, 246)), QuadraticTriangle((98, 127, 101, 247, 178, 248)), QuadraticTriangle((109, 156, 110, 201, 191, 249)), QuadraticTriangle((119, 124, 106, 182, 250, 251)), QuadraticTriangle((113, 124, 55, 232, 181, 214)), QuadraticTriangle((120, 158, 96, 252, 244, 253)), QuadraticTriangle((90, 150, 124, 254, 255, 231)), QuadraticTriangle((150, 155, 106, 256, 257, 258)), QuadraticTriangle((109, 144, 81, 259, 260, 202)), QuadraticTriangle((115, 157, 97, 261, 262, 263)), QuadraticTriangle((103, 161, 114, 264, 265, 266)), QuadraticTriangle((86, 167, 99, 267, 268, 269)), QuadraticTriangle((59, 127, 112, 270, 271, 205)), QuadraticTriangle((112, 127, 98, 271, 247, 272)), QuadraticTriangle((100, 148, 121, 273, 176, 274)), QuadraticTriangle((148, 167, 86, 275, 267, 177)), QuadraticTriangle((106, 155, 105, 257, 276, 277)), QuadraticTriangle((112, 132, 40, 236, 278, 206)), QuadraticTriangle((46, 47, 23, 279, 280, 225)), QuadraticTriangle((118, 138, 96, 281, 282, 246)), QuadraticTriangle((141, 151, 140, 283, 284, 285)), QuadraticTriangle((92, 137, 70, 286, 287, 288)), QuadraticTriangle((116, 166, 87, 289, 290, 291)), QuadraticTriangle((34, 134, 123, 292, 217, 293)), QuadraticTriangle((8, 128, 32, 294, 295, 296)), QuadraticTriangle((87, 165, 116, 297, 298, 291)), QuadraticTriangle((37, 147, 132, 299, 300, 203)), QuadraticTriangle((47, 153, 23, 301, 302, 280)), QuadraticTriangle((46, 53, 47, 303, 304, 279)), QuadraticTriangle((118, 158, 69, 245, 305, 306)), QuadraticTriangle((32, 128, 35, 295, 307, 308)), QuadraticTriangle((97, 164, 115, 309, 310, 263)), QuadraticTriangle((46, 108, 53, 311, 312, 303)), QuadraticTriangle((53, 61, 47, 313, 314, 304)), QuadraticTriangle((7, 24, 6, 315, 316, 16)), QuadraticTriangle((22, 43, 31, 317, 318, 229)), QuadraticTriangle((61, 104, 47, 319, 320, 314)), QuadraticTriangle((53, 62, 61, 321, 322, 313)), QuadraticTriangle((22, 81, 43, 212, 323, 317)), QuadraticTriangle((62, 63, 61, 324, 325, 322)), QuadraticTriangle((81, 90, 43, 326, 327, 323)), QuadraticTriangle((62, 65, 63, 328, 329, 324)), QuadraticTriangle((90, 113, 43, 233, 330, 327)), QuadraticTriangle((65, 66, 63, 331, 332, 329)), QuadraticTriangle((66, 70, 63, 333, 334, 332)), QuadraticTriangle((65, 67, 66, 335, 336, 331)), QuadraticTriangle((65, 91, 67, 337, 338, 335)), QuadraticTriangle((66, 71, 70, 339, 340, 333)), QuadraticTriangle((91, 105, 67, 341, 342, 338)), QuadraticTriangle((71, 72, 70, 343, 344, 340)), QuadraticTriangle((91, 106, 105, 345, 277, 341)), QuadraticTriangle((105, 116, 67, 346, 347, 342)), QuadraticTriangle((72, 92, 70, 348, 288, 344)), QuadraticTriangle((71, 73, 72, 349, 350, 343)), QuadraticTriangle((71, 74, 73, 351, 352, 349)), QuadraticTriangle((91, 119, 106, 353, 251, 345)), QuadraticTriangle((72, 97, 92, 354, 355, 348)), QuadraticTriangle((74, 75, 73, 356, 357, 352)), QuadraticTriangle((97, 111, 92, 358, 359, 355)), QuadraticTriangle((74, 76, 75, 360, 361, 356)), QuadraticTriangle((26, 38, 3, 362, 363, 364)), QuadraticTriangle((76, 77, 75, 365, 366, 361)), QuadraticTriangle((4, 26, 3, 367, 364, 13)), QuadraticTriangle((89, 102, 88, 368, 369, 370)), QuadraticTriangle((26, 45, 38, 371, 372, 362)), QuadraticTriangle((76, 78, 77, 373, 374, 365)), QuadraticTriangle((77, 79, 75, 375, 376, 366)), QuadraticTriangle((87, 88, 78, 377, 378, 379)), QuadraticTriangle((102, 103, 88, 380, 381, 369)), QuadraticTriangle((76, 87, 78, 382, 379, 373)), QuadraticTriangle((87, 89, 88, 383, 370, 377)), QuadraticTriangle((49, 50, 45, 384, 385, 386)), QuadraticTriangle((50, 69, 45, 387, 388, 385)), QuadraticTriangle((89, 117, 102, 389, 390, 368)), QuadraticTriangle((84, 93, 83, 391, 392, 393)), QuadraticTriangle((26, 49, 45, 394, 386, 371)), QuadraticTriangle((77, 80, 79, 395, 396, 375)), QuadraticTriangle((82, 85, 79, 397, 398, 399)), QuadraticTriangle((80, 84, 83, 400, 393, 401)), QuadraticTriangle((102, 109, 103, 402, 403, 380)), QuadraticTriangle((69, 140, 45, 404, 405, 388)), QuadraticTriangle((10, 39, 25, 406, 407, 408)), QuadraticTriangle((50, 118, 69, 409, 306, 387)), QuadraticTriangle((10, 25, 9, 408, 410, 19)), QuadraticTriangle((117, 144, 102, 222, 411, 390)), QuadraticTriangle((80, 82, 79, 412, 399, 396)), QuadraticTriangle((95, 141, 93, 413, 414, 415)), QuadraticTriangle((84, 114, 95, 416, 417, 418)), QuadraticTriangle((109, 110, 103, 249, 419, 403)), QuadraticTriangle((80, 83, 82, 401, 420, 412)), QuadraticTriangle((5, 28, 6, 196, 421, 15)), QuadraticTriangle((8, 32, 7, 296, 422, 17)), QuadraticTriangle((8, 27, 9, 423, 424, 18)), QuadraticTriangle((9, 30, 10, 425, 239, 19)), QuadraticTriangle((1, 29, 11, 426, 427, 21)), QuadraticTriangle((84, 95, 93, 418, 415, 391)), QuadraticTriangle((120, 121, 94, 428, 429, 430)), QuadraticTriangle((107, 120, 94, 431, 430, 432)), QuadraticTriangle((99, 115, 85, 433, 434, 435)), QuadraticTriangle((93, 94, 83, 436, 437, 392)), QuadraticTriangle((82, 86, 85, 438, 439, 397)), QuadraticTriangle((93, 107, 94, 440, 432, 436)), QuadraticTriangle((86, 99, 85, 269, 435, 439)), QuadraticTriangle((98, 101, 100, 248, 441, 442)), QuadraticTriangle((58, 112, 98, 237, 272, 443)), QuadraticTriangle((98, 100, 64, 442, 444, 445)), QuadraticTriangle((58, 98, 64, 443, 445, 446)), QuadraticTriangle((64, 96, 57, 447, 448, 449)), QuadraticTriangle((58, 64, 57, 446, 449, 450)), QuadraticTriangle((44, 58, 57, 186, 450, 451)), QuadraticTriangle((44, 57, 48, 451, 452, 453)), QuadraticTriangle((44, 48, 36, 453, 454, 455)), QuadraticTriangle((55, 56, 52, 188, 456, 457)), QuadraticTriangle((37, 44, 36, 204, 455, 458)), QuadraticTriangle((54, 55, 52, 215, 457, 459)), QuadraticTriangle((35, 37, 36, 460, 458, 461)), QuadraticTriangle((51, 54, 52, 462, 459, 463)), QuadraticTriangle((60, 68, 59, 464, 465, 466)), QuadraticTriangle((35, 36, 33, 461, 467, 468)), QuadraticTriangle((51, 52, 42, 463, 469, 470)), QuadraticTriangle((26, 129, 49, 471, 472, 394)), QuadraticTriangle((29, 60, 59, 473, 466, 474)), QuadraticTriangle((32, 35, 33, 308, 468, 475)), QuadraticTriangle((33, 34, 24, 476, 477, 478)), QuadraticTriangle((7, 32, 24, 422, 479, 315)), QuadraticTriangle((114, 163, 103, 480, 481, 266)), QuadraticTriangle((41, 51, 42, 482, 470, 483)), QuadraticTriangle((42, 133, 27, 484, 485, 486)), QuadraticTriangle((70, 137, 63, 287, 487, 334)), QuadraticTriangle((29, 59, 40, 474, 207, 488)), QuadraticTriangle((32, 33, 24, 475, 478, 479)), QuadraticTriangle((113, 131, 43, 243, 489, 330)), QuadraticTriangle((117, 150, 90, 490, 254, 223)), QuadraticTriangle((96, 152, 120, 491, 492, 253)), QuadraticTriangle((3, 38, 2, 363, 493, 12)), QuadraticTriangle((11, 39, 10, 494, 406, 20)), QuadraticTriangle((27, 30, 9, 495, 425, 424)), QuadraticTriangle((140, 171, 141, 496, 497, 285)), QuadraticTriangle((34, 146, 24, 498, 499, 477)), QuadraticTriangle((80, 143, 84, 500, 501, 400)), QuadraticTriangle((41, 42, 27, 483, 486, 502)), QuadraticTriangle((56, 136, 52, 219, 503, 456)), QuadraticTriangle((151, 162, 140, 504, 505, 284)), QuadraticTriangle((110, 162, 151, 506, 504, 507)), QuadraticTriangle((40, 147, 39, 508, 509, 510)), QuadraticTriangle((110, 161, 103, 511, 264, 419)), QuadraticTriangle((45, 140, 38, 405, 512, 372)), QuadraticTriangle((93, 141, 107, 414, 513, 440)), QuadraticTriangle((102, 144, 109, 411, 259, 402)), QuadraticTriangle((158, 171, 69, 514, 515, 305)), QuadraticTriangle((8, 41, 27, 516, 502, 423)), QuadraticTriangle((69, 171, 140, 515, 496, 404)), QuadraticTriangle((85, 142, 79, 517, 518, 398)), QuadraticTriangle((104, 153, 47, 519, 301, 320)), QuadraticTriangle((97, 125, 111, 520, 521, 358)), QuadraticTriangle((30, 133, 46, 522, 523, 224)), QuadraticTriangle((77, 143, 80, 524, 500, 395)), QuadraticTriangle((84, 143, 114, 501, 525, 416)), QuadraticTriangle((96, 138, 57, 282, 526, 448)), QuadraticTriangle((52, 136, 42, 503, 527, 469)), QuadraticTriangle((7, 41, 8, 528, 516, 17)), QuadraticTriangle((43, 131, 31, 489, 234, 318)), QuadraticTriangle((1, 60, 29, 529, 473, 426)), QuadraticTriangle((29, 40, 39, 488, 510, 530)), QuadraticTriangle((29, 39, 11, 530, 494, 427)), QuadraticTriangle((33, 134, 34, 531, 292, 476)), QuadraticTriangle((79, 142, 75, 518, 532, 376)), QuadraticTriangle((115, 142, 85, 533, 517, 434)), QuadraticTriangle((24, 146, 6, 499, 534, 316)), QuadraticTriangle((36, 134, 33, 535, 531, 467)), QuadraticTriangle((116, 145, 67, 536, 537, 347)), QuadraticTriangle((57, 138, 48, 526, 538, 452)), QuadraticTriangle((9, 128, 8, 539, 294, 18)), QuadraticTriangle((67, 145, 66, 537, 540, 336)), QuadraticTriangle((28, 149, 6, 541, 542, 421)), QuadraticTriangle((121, 139, 94, 174, 543, 429)), QuadraticTriangle((126, 167, 101, 544, 545, 180)), QuadraticTriangle((48, 134, 36, 210, 535, 454)), QuadraticTriangle((27, 133, 30, 485, 522, 495)), QuadraticTriangle((4, 129, 26, 546, 471, 367)), QuadraticTriangle((81, 144, 90, 260, 221, 326)), QuadraticTriangle((132, 147, 40, 300, 508, 278)), QuadraticTriangle((82, 139, 86, 547, 173, 438)), QuadraticTriangle((94, 139, 83, 543, 548, 437)), QuadraticTriangle((91, 168, 119, 549, 550, 353)), QuadraticTriangle((92, 159, 137, 551, 552, 286)), QuadraticTriangle((119, 168, 122, 550, 553, 238)), QuadraticTriangle((124, 150, 106, 255, 258, 250)), QuadraticTriangle((10, 23, 11, 240, 554, 20)), QuadraticTriangle((83, 139, 82, 548, 547, 420)), QuadraticTriangle((104, 154, 153, 555, 556, 519)), QuadraticTriangle((99, 157, 115, 557, 261, 433)), QuadraticTriangle((66, 145, 71, 540, 558, 339)), QuadraticTriangle((41, 149, 51, 559, 560, 482)), QuadraticTriangle((49, 123, 50, 561, 562, 384)), QuadraticTriangle((95, 151, 141, 563, 283, 413)), QuadraticTriangle((131, 169, 28, 564, 565, 235)), QuadraticTriangle((71, 145, 74, 558, 566, 351)), QuadraticTriangle((46, 133, 108, 523, 567, 311)), QuadraticTriangle((125, 126, 68, 568, 190, 569)), QuadraticTriangle((75, 142, 73, 532, 570, 357)), QuadraticTriangle((42, 136, 133, 527, 571, 484)), QuadraticTriangle((3, 156, 22, 572, 211, 241)), QuadraticTriangle((39, 147, 25, 509, 573, 407)), QuadraticTriangle((137, 159, 104, 552, 574, 575)), QuadraticTriangle((123, 130, 34, 576, 577, 293)), QuadraticTriangle((78, 143, 77, 578, 524, 374)), QuadraticTriangle((50, 135, 118, 579, 580, 409)), QuadraticTriangle((64, 152, 96, 581, 491, 447)), QuadraticTriangle((154, 172, 60, 582, 583, 584)), QuadraticTriangle((7, 149, 41, 585, 559, 528)), QuadraticTriangle((63, 137, 61, 487, 586, 325)), QuadraticTriangle((103, 163, 88, 481, 587, 381)), QuadraticTriangle((6, 146, 5, 534, 588, 15)), QuadraticTriangle((48, 138, 135, 538, 589, 208)), QuadraticTriangle((25, 128, 9, 590, 539, 410)), QuadraticTriangle((121, 152, 100, 591, 592, 274)), QuadraticTriangle((6, 149, 7, 542, 585, 16)), QuadraticTriangle((101, 148, 100, 593, 273, 441)), QuadraticTriangle((76, 165, 87, 594, 297, 382)), QuadraticTriangle((5, 129, 4, 595, 546, 14)), QuadraticTriangle((87, 166, 89, 290, 596, 383)), QuadraticTriangle((49, 130, 123, 597, 576, 561)), QuadraticTriangle((68, 127, 59, 189, 270, 465)), QuadraticTriangle((129, 130, 49, 598, 597, 472)), QuadraticTriangle((111, 172, 154, 599, 582, 600)), QuadraticTriangle((23, 153, 11, 302, 601, 554)), QuadraticTriangle((115, 164, 142, 310, 602, 533)), QuadraticTriangle((54, 169, 131, 603, 564, 242)), QuadraticTriangle((120, 152, 121, 492, 591, 428)), QuadraticTriangle((142, 164, 73, 602, 604, 570)), QuadraticTriangle((126, 157, 99, 605, 557, 606)), QuadraticTriangle((53, 170, 62, 607, 608, 321)), QuadraticTriangle((62, 170, 122, 608, 227, 609)), QuadraticTriangle((100, 152, 64, 592, 581, 444)), QuadraticTriangle((35, 160, 37, 610, 611, 460)), QuadraticTriangle((62, 168, 65, 612, 613, 328)), QuadraticTriangle((61, 137, 104, 586, 575, 319)), QuadraticTriangle((107, 158, 120, 614, 252, 431)), QuadraticTriangle((5, 146, 129, 588, 615, 595)), QuadraticTriangle((116, 165, 145, 298, 616, 536)), QuadraticTriangle((72, 164, 97, 617, 309, 354)), QuadraticTriangle((88, 163, 78, 587, 618, 378)), QuadraticTriangle((145, 165, 74, 616, 619, 566)), QuadraticTriangle((122, 168, 62, 553, 612, 609)), QuadraticTriangle((117, 155, 150, 620, 256, 490)), QuadraticTriangle((68, 172, 125, 621, 622, 569)), QuadraticTriangle((1, 154, 60, 623, 584, 529)), QuadraticTriangle((89, 155, 117, 624, 620, 389)), QuadraticTriangle((11, 153, 1, 601, 625, 21)), QuadraticTriangle((37, 160, 147, 611, 626, 299)), QuadraticTriangle((105, 166, 116, 627, 289, 346)), QuadraticTriangle((28, 169, 149, 565, 628, 541)), QuadraticTriangle((97, 157, 125, 262, 629, 520)), QuadraticTriangle((123, 135, 50, 216, 579, 562)), QuadraticTriangle((38, 162, 2, 630, 631, 493)), QuadraticTriangle((114, 161, 95, 265, 632, 417)), QuadraticTriangle((74, 165, 76, 619, 594, 360)), QuadraticTriangle((128, 160, 35, 633, 610, 307)), QuadraticTriangle((78, 163, 143, 618, 634, 578)), QuadraticTriangle((65, 168, 91, 613, 549, 337)), QuadraticTriangle((73, 164, 72, 604, 617, 350)), QuadraticTriangle((51, 169, 54, 635, 603, 462)), QuadraticTriangle((129, 146, 130, 615, 636, 598)), QuadraticTriangle((149, 169, 51, 628, 635, 560)), QuadraticTriangle((99, 167, 126, 268, 544, 606)), QuadraticTriangle((104, 159, 154, 574, 637, 555)), QuadraticTriangle((125, 172, 111, 622, 599, 521)), QuadraticTriangle((108, 170, 53, 198, 607, 312)), QuadraticTriangle((2, 156, 3, 192, 572, 12)), QuadraticTriangle((111, 159, 92, 638, 551, 359)), QuadraticTriangle((60, 172, 68, 583, 621, 464)), QuadraticTriangle((135, 138, 118, 589, 281, 580)), QuadraticTriangle((143, 163, 114, 634, 480, 525)), QuadraticTriangle((130, 146, 34, 636, 498, 577)), QuadraticTriangle((2, 162, 110, 631, 506, 193)), QuadraticTriangle((151, 161, 110, 639, 511, 507)), QuadraticTriangle((140, 162, 38, 505, 630, 512)), QuadraticTriangle((153, 154, 1, 556, 623, 625)), QuadraticTriangle((133, 136, 108, 571, 218, 567)), QuadraticTriangle((107, 171, 158, 640, 514, 614)), QuadraticTriangle((155, 166, 105, 641, 627, 276)), QuadraticTriangle((25, 160, 128, 642, 633, 590)), QuadraticTriangle((141, 171, 107, 497, 640, 513)), QuadraticTriangle((101, 167, 148, 545, 275, 593)), QuadraticTriangle((125, 157, 126, 629, 605, 568)), QuadraticTriangle((95, 161, 151, 632, 639, 563)), QuadraticTriangle((89, 166, 155, 596, 641, 624)), QuadraticTriangle((147, 160, 25, 626, 642, 573)), QuadraticTriangle((154, 159, 111, 637, 638, 600))] #src
# nodes = Node{3, Float64}[Node{3, Float64}(Vec{3, Float64}([6.123233995736766e-17, -1.499759782661858e-32, 1.0])), Node{3, Float64}(Vec{3, Float64}([6.123233995736766e-17, -1.499759782661858e-32, -1.0])), Node{3, Float64}(Vec{3, Float64}([0.3090169943749472, -7.568733460868295e-17, -0.9510565162951536])), Node{3, Float64}(Vec{3, Float64}([0.5877852522924729, -1.439658655611993e-16, -0.8090169943749476])), Node{3, Float64}(Vec{3, Float64}([0.8090169943749473, -1.981520145234183e-16, -0.5877852522924734])), Node{3, Float64}(Vec{3, Float64}([0.9510565162951535, -2.329416636978185e-16, -0.3090169943749476])), Node{3, Float64}(Vec{3, Float64}([1.0, -2.449293598294706e-16, -2.449293598294706e-16])), Node{3, Float64}(Vec{3, Float64}([0.9510565162951536, -2.329416636978185e-16, 0.3090169943749472])), Node{3, Float64}(Vec{3, Float64}([0.8090169943749476, -1.981520145234184e-16, 0.5877852522924729])), Node{3, Float64}(Vec{3, Float64}([0.5877852522924734, -1.439658655611994e-16, 0.8090169943749472])), Node{3, Float64}(Vec{3, Float64}([0.3090169943749477, -7.568733460868307e-17, 0.9510565162951535])), Node{3, Float64}(Vec{3, Float64}([0.1564344650402307, -3.83153933775694e-17, -0.9876883405951378])), Node{3, Float64}(Vec{3, Float64}([0.4539904997395466, -1.111956024698686e-16, -0.891006524188368])), Node{3, Float64}(Vec{3, Float64}([0.7071067811865474, -1.731912112470986e-16, -0.7071067811865477])), Node{3, Float64}(Vec{3, Float64}([0.8910065241883678, -2.182336575733387e-16, -0.453990499739547])), Node{3, Float64}(Vec{3, Float64}([0.9876883405951377, -2.419138729729992e-16, -0.1564344650402311])), Node{3, Float64}(Vec{3, Float64}([0.9876883405951378, -2.419138729729992e-16, 0.1564344650402306])), Node{3, Float64}(Vec{3, Float64}([0.891006524188368, -2.182336575733387e-16, 0.4539904997395466])), Node{3, Float64}(Vec{3, Float64}([0.7071067811865477, -1.731912112470987e-16, 0.7071067811865474])), Node{3, Float64}(Vec{3, Float64}([0.453990499739547, -1.111956024698687e-16, 0.8910065241883677])), Node{3, Float64}(Vec{3, Float64}([0.1564344650402312, -3.831539337756953e-17, 0.9876883405951377])), Node{3, Float64}(Vec{3, Float64}([0.3569270192488652, 0.280553875011349, -0.8910065241883678])), Node{3, Float64}(Vec{3, Float64}([0.4371529102920968, 0.2734329305187583, 0.8568148957219838])), Node{3, Float64}(Vec{3, Float64}([0.9509980539041696, -0.26748511456887, -0.1550948579243064])), Node{3, Float64}(Vec{3, Float64}([0.7010326263701245, -0.2642085807282103, 0.66237986279339])), Node{3, Float64}(Vec{3, Float64}([0.4557230592119721, -0.2804055822079268, -0.8448012800470386])), Node{3, Float64}(Vec{3, Float64}([0.8579604780797957, 0.2698172279020973, 0.4371526982420629])), Node{3, Float64}(Vec{3, Float64}([0.8579604780797949, 0.2698172279020994, -0.4371526982420629])), Node{3, Float64}(Vec{3, Float64}([0.1506325540503649, -0.2698172279019947, 0.9510565162951921])), Node{3, Float64}(Vec{3, Float64}([0.6808812905078324, 0.2698172279020885, 0.6808812905078397])), Node{3, Float64}(Vec{3, Float64}([0.6212581076243342, 0.2996097381118902, -0.7240665498001932])), Node{3, Float64}(Vec{3, Float64}([0.9503583486325037, -0.269666382128176, 0.1552386921305421])), Node{3, Float64}(Vec{3, Float64}([0.852583363144894, -0.5225860288129365, -0.00233481863673884])), Node{3, Float64}(Vec{3, Float64}([0.8168856169729826, -0.4993851513833295, -0.2886388043221473])), Node{3, Float64}(Vec{3, Float64}([0.810365322419831, -0.5037579254278574, 0.2992256619810952])), Node{3, Float64}(Vec{3, Float64}([0.6692191928879879, -0.7291939860450095, 0.1429048725066452])), Node{3, Float64}(Vec{3, Float64}([0.5982328689380234, -0.6710480447953684, 0.4379634186761435])), Node{3, Float64}(Vec{3, Float64}([0.1396663028336856, -0.2630486925403432, -0.95461966730504])), Node{3, Float64}(Vec{3, Float64}([0.4514631740141711, -0.2764825965481388, 0.8483739601820941])), Node{3, Float64}(Vec{3, Float64}([0.2656805088149847, -0.5189327480995083, 0.812479335236105])), Node{3, Float64}(Vec{3, Float64}([0.9562426915941572, 0.2605200766244171, 0.1331510587579743])), Node{3, Float64}(Vec{3, Float64}([0.8205353904539959, 0.5142067451245198, 0.2496259126792635])), Node{3, Float64}(Vec{3, Float64}([0.4315330339435517, 0.5487851291736285, -0.7159707554176757])), Node{3, Float64}(Vec{3, Float64}([0.4227433703980156, -0.8638491071672681, 0.2739575931249943])), Node{3, Float64}(Vec{3, Float64}([0.2533321381291593, -0.5194986426167724, -0.816053912502256])), Node{3, Float64}(Vec{3, Float64}([0.4746165702604443, 0.5196832012319649, 0.7104002263453397])), Node{3, Float64}(Vec{3, Float64}([0.1794310196242874, 0.4693963227069368, 0.86456439981403])), Node{3, Float64}(Vec{3, Float64}([0.4549014889623809, -0.8896283518779415, -0.04032407314181124])), Node{3, Float64}(Vec{3, Float64}([0.5334972857945512, -0.5064666913889904, -0.6774010160631116])), Node{3, Float64}(Vec{3, Float64}([0.3299386131026945, -0.7304111183526599, -0.5980301913538204])), Node{3, Float64}(Vec{3, Float64}([0.8702062666223009, 0.4902724104444173, -0.0487238862191618])), Node{3, Float64}(Vec{3, Float64}([0.6985731805597851, 0.7142697866770318, 0.04259323001291791])), Node{3, Float64}(Vec{3, Float64}([0.2296843115287244, 0.7082599887008079, 0.6675424371851632])), Node{3, Float64}(Vec{3, Float64}([0.7069936913703737, 0.6602762528044178, -0.25336769791165])), Node{3, Float64}(Vec{3, Float64}([0.5046140344474411, 0.847753185318715, -0.1633377268748682])), Node{3, Float64}(Vec{3, Float64}([0.4459016531317898, 0.8671684464372166, 0.2217895426705266])), Node{3, Float64}(Vec{3, Float64}([0.1957393008348495, -0.9778799588436223, 0.07373542025837701])), Node{3, Float64}(Vec{3, Float64}([0.132948405405323, -0.9163556806890073, 0.377646644323987])), Node{3, Float64}(Vec{3, Float64}([-0.04078294352825544, -0.5000378079804607, 0.8650427400465639])), Node{3, Float64}(Vec{3, Float64}([-0.15879096852963, -0.2269691626539187, 0.9608696204572195])), Node{3, Float64}(Vec{3, Float64}([-0.0627822729549371, 0.6521448166384469, 0.7554902542946654])), Node{3, Float64}(Vec{3, Float64}([-0.00810393003187733, 0.8557402770446653, 0.5173421542476102])), Node{3, Float64}(Vec{3, Float64}([-0.303927994070528, 0.7442868971468831, 0.5946972247755409])), Node{3, Float64}(Vec{3, Float64}([-0.1005857430240445, -0.9805320120393182, 0.1686400950735836])), Node{3, Float64}(Vec{3, Float64}([-0.250312169949072, 0.9087344998521109, 0.3339841708134095])), Node{3, Float64}(Vec{3, Float64}([-0.5249866990376768, 0.7644318034931047, 0.3742098123269927])), Node{3, Float64}(Vec{3, Float64}([-0.4519233842103236, 0.8869049507643479, 0.09573329156347832])), Node{3, Float64}(Vec{3, Float64}([-0.3496351647243795, -0.4195763861086914, 0.8376818655122756])), Node{3, Float64}(Vec{3, Float64}([0.03514175063573507, -0.712088294611358, -0.7012098958512663])), Node{3, Float64}(Vec{3, Float64}([-0.5578090220966426, 0.5621381566949251, 0.6106142707595517])), Node{3, Float64}(Vec{3, Float64}([-0.7517046929582519, 0.5490049396020039, 0.3654225374510175])), Node{3, Float64}(Vec{3, Float64}([-0.7516770591270084, 0.3188376499659225, 0.5773423176473207])), Node{3, Float64}(Vec{3, Float64}([-0.9078594242555867, 0.2839340396968504, 0.308500772919197])), Node{3, Float64}(Vec{3, Float64}([-0.8729743723417194, 0.4810256495227656, 0.08080884689056374])), Node{3, Float64}(Vec{3, Float64}([-0.9781767908615765, 0.2072992377015003, 0.01404250220312223])), Node{3, Float64}(Vec{3, Float64}([-0.8971795561961635, 0.3901597641193664, -0.2069884112842441])), Node{3, Float64}(Vec{3, Float64}([-0.9548315645414797, 0.1004649748246536, -0.2796488372740924])), Node{3, Float64}(Vec{3, Float64}([-0.8206862560040664, 0.2795690009485128, -0.4983123949037174])), Node{3, Float64}(Vec{3, Float64}([-0.9944324272272498, -0.09795994042506151, -0.03883294671846241])), Node{3, Float64}(Vec{3, Float64}([-0.9222459365616031, -0.2071687888868163, -0.3264100571471125])), Node{3, Float64}(Vec{3, Float64}([0.1834719611680492, 0.5010291323794294, -0.8457587409966664])), Node{3, Float64}(Vec{3, Float64}([-0.91361990091357, -0.3989235422328132, -0.07847728401966728])), Node{3, Float64}(Vec{3, Float64}([-0.7955325746014653, -0.491919372526284, -0.3537559238815812])), Node{3, Float64}(Vec{3, Float64}([-0.7611350028438446, -0.2826413132177686, -0.5837699851040954])), Node{3, Float64}(Vec{3, Float64}([-0.9376616866552163, -0.2782070648190273, 0.2083060019866838])), Node{3, Float64}(Vec{3, Float64}([-0.8105616108825711, -0.5611756084770717, 0.167546445542243])), Node{3, Float64}(Vec{3, Float64}([-0.7138470175755108, 0.5780614864020698, -0.3953066574662994])), Node{3, Float64}(Vec{3, Float64}([-0.6051533012954252, 0.4204977029517603, -0.6759964228777704])), Node{3, Float64}(Vec{3, Float64}([-0.464381110892345, 0.6786288794782291, -0.5690457167789902])), Node{3, Float64}(Vec{3, Float64}([0.1877443329604412, 0.734160027560642, -0.6525037313099415])), Node{3, Float64}(Vec{3, Float64}([-0.170160273810633, 0.9844745574140952, 0.04307350718262549])), Node{3, Float64}(Vec{3, Float64}([-0.5249321356083022, 0.3098710149269829, 0.7927333770655985])), Node{3, Float64}(Vec{3, Float64}([-0.5953716525426767, -0.5479615533534468, -0.5875974228969015])), Node{3, Float64}(Vec{3, Float64}([-0.5948775141882189, -0.731153543534381, -0.3339689190484101])), Node{3, Float64}(Vec{3, Float64}([-0.5390479091791861, -0.3243867630844813, -0.7773034025045308])), Node{3, Float64}(Vec{3, Float64}([-0.0520370919307315, -0.9844854839200972, -0.1675722919041359])), Node{3, Float64}(Vec{3, Float64}([-0.6990561222536326, 0.04743990203771749, 0.7134914110445663])), Node{3, Float64}(Vec{3, Float64}([-0.1709321209591976, -0.8735796289436984, 0.4556762468233124])), Node{3, Float64}(Vec{3, Float64}([-0.7974897652646338, -0.4017982288808797, 0.4500758353503858])), Node{3, Float64}(Vec{3, Float64}([-0.3862300653530193, -0.892831085675539, 0.2316872656596398])), Node{3, Float64}(Vec{3, Float64}([-0.4483350138760702, -0.7375533246169005, 0.5049859489919507])), Node{3, Float64}(Vec{3, Float64}([-0.3297241885467164, 0.509198624068942, -0.7949834719876292])), Node{3, Float64}(Vec{3, Float64}([-0.5006088199586549, 0.2260636929674356, -0.8356350974567357])), Node{3, Float64}(Vec{3, Float64}([-0.114341460189287, 0.3765549448176345, 0.9193108310115626])), Node{3, Float64}(Vec{3, Float64}([-0.3640768444247161, 0.9138220136269561, -0.1799371522629953])), Node{3, Float64}(Vec{3, Float64}([-0.07438705466455738, 0.9677528189890058, -0.2406679194183651])), Node{3, Float64}(Vec{3, Float64}([-0.3648584408113792, -0.7551083151164547, -0.5446923449165394])), Node{3, Float64}(Vec{3, Float64}([0.4869006321121222, 0.7190276434148181, 0.4959102967817358])), Node{3, Float64}(Vec{3, Float64}([-0.1521295446889728, 0.2979596432036986, -0.9423781898233057])), Node{3, Float64}(Vec{3, Float64}([-0.2544190872670957, 0.003318804331989557, -0.9670883690604412])), Node{3, Float64}(Vec{3, Float64}([-0.4574608311337778, 0.04016692189285442, 0.8883221298403223])), Node{3, Float64}(Vec{3, Float64}([0.05162779183626617, -0.7587722997293148, 0.6493066827575379])), Node{3, Float64}(Vec{3, Float64}([0.4718555144772151, 0.7467039305053169, -0.4688129836356428])), Node{3, Float64}(Vec{3, Float64}([-0.6603962997927848, -0.03746342128023257, -0.7499821459781414])), Node{3, Float64}(Vec{3, Float64}([-0.8755766085628751, -0.1265053019308967, 0.4662209895756586])), Node{3, Float64}(Vec{3, Float64}([-0.6181791088052646, 0.7728275785374294, -0.1434995584965406])), Node{3, Float64}(Vec{3, Float64}([-0.1690313656792333, 0.7375323982092609, -0.6538152330806537])), Node{3, Float64}(Vec{3, Float64}([0.1200196207970379, -0.8918575867551481, -0.436102437015684])), Node{3, Float64}(Vec{3, Float64}([0.1687644519228687, 0.9855263372163161, 0.01601244578962911])), Node{3, Float64}(Vec{3, Float64}([-0.3483879170786434, -0.8995293935105305, -0.2635767998974518])), Node{3, Float64}(Vec{3, Float64}([-0.5764928164425412, -0.8170915372428317, -0.004177601739351213])), Node{3, Float64}(Vec{3, Float64}([0.1882506182999614, 0.9293683913062556, 0.3175470011675514])), Node{3, Float64}(Vec{3, Float64}([0.6134454888565073, -0.6587663452922019, -0.4355588760569071])), Node{3, Float64}(Vec{3, Float64}([0.2249597314763762, 0.912022857110095, -0.3429393930752427])), Node{3, Float64}(Vec{3, Float64}([-0.5648047232459188, -0.2119475694624456, 0.7975423828224195])), Node{3, Float64}(Vec{3, Float64}([-0.5794573587738784, -0.4650165308383579, 0.6693196511457432])), Node{3, Float64}(Vec{3, Float64}([-0.2366091774971593, -0.673742809876049, 0.7000619424482694])), Node{3, Float64}(Vec{3, Float64}([0.8527104539816098, -0.2459350607989368, 0.4608696426759959])), Node{3, Float64}(Vec{3, Float64}([0.6960448696791582, -0.2371008564340713, -0.6777202396797322])), Node{3, Float64}(Vec{3, Float64}([0.7383552949632746, -0.4356623338363972, -0.5148104401388143])), Node{3, Float64}(Vec{3, Float64}([0.6972157319333021, 0.5281952846001349, -0.4846647959888281])), Node{3, Float64}(Vec{3, Float64}([0.347292924577952, -0.7337483028081979, 0.5839529541531424])), Node{3, Float64}(Vec{3, Float64}([0.6950102695017686, 0.5301053528082009, 0.4857458596953471])), Node{3, Float64}(Vec{3, Float64}([0.6829752857073232, -0.715076601189415, -0.1490309147270943])), Node{3, Float64}(Vec{3, Float64}([0.4146754880735923, -0.8482261971288859, -0.3294792225546194])), Node{3, Float64}(Vec{3, Float64}([0.6438850005135908, 0.699438384671586, 0.3101581083280197])), Node{3, Float64}(Vec{3, Float64}([-0.297254111478026, 0.5256842530929838, 0.7970546149790998])), Node{3, Float64}(Vec{3, Float64}([0.2379496082268838, -0.9521921223690982, -0.1915989197331362])), Node{3, Float64}(Vec{3, Float64}([-0.7701004523871441, -0.6262692692633408, -0.1213758444233331])), Node{3, Float64}(Vec{3, Float64}([-0.04870127384665793, -0.4702806835042472, -0.8811720970664533])), Node{3, Float64}(Vec{3, Float64}([-0.3330278774171408, -0.5614481759300539, -0.7575410078720815])), Node{3, Float64}(Vec{3, Float64}([-0.9689297499821217, 0.02104148294224663, 0.2464394359577509])), Node{3, Float64}(Vec{3, Float64}([-0.846843367254934, 0.005714507259744244, -0.5318116731918389])), Node{3, Float64}(Vec{3, Float64}([-0.04746359565270164, 0.5900070474485388, -0.8060017934525794])), Node{3, Float64}(Vec{3, Float64}([-0.6986480461733326, 0.7071703312001933, 0.1086325469111062])), Node{3, Float64}(Vec{3, Float64}([0.8661092531030132, -0.2422987088950967, -0.4372025815993196])), Node{3, Float64}(Vec{3, Float64}([0.5402416852612612, -0.4857275826755379, 0.6871736584985276])), Node{3, Float64}(Vec{3, Float64}([-0.5959480054569645, -0.7520023710628726, 0.2816707452109351])), Node{3, Float64}(Vec{3, Float64}([0.952973978467038, 0.2564234474475258, -0.1615165996541267])), Node{3, Float64}(Vec{3, Float64}([-0.01462904509434265, 0.877618127075472, -0.4791371558000571])), Node{3, Float64}(Vec{3, Float64}([-0.3034152571707645, -0.286217973431629, -0.9088555734552604])), Node{3, Float64}(Vec{3, Float64}([-0.3017858446842533, -0.953352179764715, -0.006702632772165666])), Node{3, Float64}(Vec{3, Float64}([0.09058624877843947, 0.1905528950128461, 0.9774884785686602])), Node{3, Float64}(Vec{3, Float64}([-0.1973201026088886, 0.08799498112396965, 0.9763819234313025])), Node{3, Float64}(Vec{3, Float64}([-0.2878703617800117, 0.8529298840108065, -0.4354782058495664])), Node{3, Float64}(Vec{3, Float64}([0.149818136421478, 0.3047344838543294, -0.9405803635783765])), Node{3, Float64}(Vec{3, Float64}([-0.7314557619932112, -0.2478245862327181, 0.6352601378219105])), Node{3, Float64}(Vec{3, Float64}([-0.1375827891332612, -0.8707453819315426, -0.4720947531790674])), Node{3, Float64}(Vec{3, Float64}([-0.3433904648122909, 0.2222815344623098, 0.9125096756271025])), Node{3, Float64}(Vec{3, Float64}([0.7251853405213533, -0.4530639739871879, 0.5184971141364874])), Node{3, Float64}(Vec{3, Float64}([-0.4601950358024463, -0.1083766469907528, -0.8811782063861016])), Node{3, Float64}(Vec{3, Float64}([-0.0502277688492161, -0.2892680239368302, -0.9559294856651881])), Node{3, Float64}(Vec{3, Float64}([-0.7104189493493915, 0.1859998577119419, -0.6787554562111777])), Node{3, Float64}(Vec{3, Float64}([-0.8606326124626713, 0.126065665070423, 0.493375064688143])), Node{3, Float64}(Vec{3, Float64}([-0.7897543446414333, 0.6004310913334062, -0.1255809686224593])), Node{3, Float64}(Vec{3, Float64}([-0.507050404155998, 0.7824991382674806, -0.3613792831027939])), Node{3, Float64}(Vec{3, Float64}([-0.6438413033196639, -0.602298941313687, 0.471915629569575])), Node{3, Float64}(Vec{3, Float64}([-0.03553269700960936, 0.9642933100142027, 0.2624420692363861])), Node{3, Float64}(Vec{3, Float64}([0.8430492816075711, 0.4544336531682183, -0.2876768389167709])), Node{3, Float64}(Vec{3, Float64}([0.2860415446647247, 0.828462800035671, 0.4814868883810587])), Node{3, Float64}(Vec{3, Float64}([-0.1824585577315876, -0.7135091380548476, -0.6764714218817652])), Node{3, Float64}(Vec{3, Float64}([-0.3917812796843447, -0.2012538866168797, 0.8977774234243683])), Node{3, Float64}(Vec{3, Float64}([-0.7993087677730358, -0.6004668069667828, 0.02334753717778009])), Node{3, Float64}(Vec{3, Float64}([-0.6807954068304947, -0.7297180449465342, -0.06347589241522204])), Node{3, Float64}(Vec{3, Float64}([-0.7068873073567887, -0.7024090275499386, 0.08325798889126777])), Node{3, Float64}(Vec{3, Float64}([-0.5926503126984874, -0.7931521813647442, 0.1402684000576504])), Node{3, Float64}(Vec{3, Float64}([-0.7118031286917357, -0.6645700701273977, 0.2273387953595298])), Node{3, Float64}(Vec{3, Float64}([-0.3462563323227333, -0.7134453135094919, 0.6091816945359994])), Node{3, Float64}(Vec{3, Float64}([-0.4165587754322859, -0.5812763731835247, 0.698996827309654])), Node{3, Float64}(Vec{3, Float64}([-0.5216800071530724, -0.6103923978132467, 0.596046215346231])), Node{3, Float64}(Vec{3, Float64}([0.3701271977409046, 0.8927691834025842, -0.2568443938635774])), Node{3, Float64}(Vec{3, Float64}([0.2003330585712624, 0.9655028822635789, -0.166345573984416])), Node{3, Float64}(Vec{3, Float64}([0.3438085745504816, 0.9360222106186186, -0.07522024524155992])), Node{3, Float64}(Vec{3, Float64}([0.390862037031724, -0.8109230462170702, 0.4354660504809056])), Node{3, Float64}(Vec{3, Float64}([0.2438637824468649, -0.8379133025895176, 0.4882947398387941])), Node{3, Float64}(Vec{3, Float64}([0.2812949452503513, -0.9011517357990662, 0.3298464837510501])), Node{3, Float64}(Vec{3, Float64}([0.3125798959202163, 0.9421621558176724, 0.1209308927094427])), Node{3, Float64}(Vec{3, Float64}([0.4845627875560998, 0.8742488074450028, 0.02979811398146855])), Node{3, Float64}(Vec{3, Float64}([-0.2967162038964204, -0.5533623066627184, 0.7782992046187722])), Node{3, Float64}(Vec{3, Float64}([-0.4694559723748438, -0.4469710147033112, 0.7614643800051859])), Node{3, Float64}(Vec{3, Float64}([-0.05405146973580655, 0.1591833807322997, -0.9857682739457763])), Node{3, Float64}(Vec{3, Float64}([0.0760472609765124, 0.154682359397515, -0.985033086646935])), Node{3, Float64}(Vec{3, Float64}([-0.1282693095915917, 0.00167322642694246, -0.9917379616260641])), Node{3, Float64}(Vec{3, Float64}([0.7283298177176191, 0.152568345516488, -0.6680258801646695])), Node{3, Float64}(Vec{3, Float64}([0.7528278559863371, 0.2898019847155034, -0.590986487921653])), Node{3, Float64}(Vec{3, Float64}([0.8438782781673287, 0.1365902667938345, -0.5188569655064234])), Node{3, Float64}(Vec{3, Float64}([0.3703725918870568, 0.8580110335494051, 0.3558668423530706])), Node{3, Float64}(Vec{3, Float64}([0.3890339494826956, 0.7788762692607992, 0.4919393695693348])), Node{3, Float64}(Vec{3, Float64}([0.472268258239162, 0.8030748599466717, 0.363364089559469])), Node{3, Float64}(Vec{3, Float64}([0.1676679105409971, 0.4053546832053176, -0.8986517971819412])), Node{3, Float64}(Vec{3, Float64}([-0.001169112041792322, 0.3048431431911193, -0.9524018538549747])), Node{3, Float64}(Vec{3, Float64}([0.01600103030728741, 0.4079022950200044, -0.9128853623246013])), Node{3, Float64}(Vec{3, Float64}([0.4780638437461201, -0.7102739515106897, 0.5166874056023387])), Node{3, Float64}(Vec{3, Float64}([0.5166515123449744, -0.7767143879579392, 0.3602582050845958])), Node{3, Float64}(Vec{3, Float64}([0.005507075081749462, -0.6392308661156632, 0.768995170289816])), Node{3, Float64}(Vec{3, Float64}([0.1612961840398791, -0.649491198686889, 0.74306441432923])), Node{3, Float64}(Vec{3, Float64}([0.1138381138125752, -0.51578008853411, 0.8491241276252495])), Node{3, Float64}(Vec{3, Float64}([0.4395921658564069, -0.8785274510662634, -0.1869444982894322])), Node{3, Float64}(Vec{3, Float64}([0.5574112056851871, -0.7938795457320552, -0.2429979725118125])), Node{3, Float64}(Vec{3, Float64}([0.5757659360846239, -0.8119811125511834, -0.09581367180491039])), Node{3, Float64}(Vec{3, Float64}([0.2548401065652531, 0.2943391684670835, -0.9210977005681408])), Node{3, Float64}(Vec{3, Float64}([0.2729685856127048, 0.3947964666805786, -0.8772821103642375])), Node{3, Float64}(Vec{3, Float64}([0.5976370085575126, 0.7132917625781938, -0.3661213834789238])), Node{3, Float64}(Vec{3, Float64}([0.4947463856188002, 0.8078612343281417, -0.3202908677857437])), Node{3, Float64}(Vec{3, Float64}([0.6122832325363546, 0.7620792765338096, -0.210581146906692])), Node{3, Float64}(Vec{3, Float64}([0.5197210261226239, -0.761793337633145, -0.3867311284908416])), Node{3, Float64}(Vec{3, Float64}([0.655636845003732, -0.6947914385781769, -0.2956436780180148])), Node{3, Float64}(Vec{3, Float64}([0.5696477196192549, 0.714570396849264, 0.4060672647225679])), Node{3, Float64}(Vec{3, Float64}([0.5500844747559844, 0.7907658741800336, 0.2685077333424869])), Node{3, Float64}(Vec{3, Float64}([0.6120740625076809, 0.1516764043810847, -0.7761182966271116])), Node{3, Float64}(Vec{3, Float64}([0.07103085744435393, 0.6704892242699584, -0.7385112168603734])), Node{3, Float64}(Vec{3, Float64}([-0.109064478018548, 0.6687795216984717, -0.7354174943467862])), Node{3, Float64}(Vec{3, Float64}([0.009509021781128973, 0.7478426655414471, -0.6638078984921989])), Node{3, Float64}(Vec{3, Float64}([0.5855483751450067, 0.400079229180363, 0.7050317090340611])), Node{3, Float64}(Vec{3, Float64}([0.4607176767047122, 0.4007620669160631, 0.7919147606232486])), Node{3, Float64}(Vec{3, Float64}([0.565440897084711, 0.2747463867376485, 0.7776831069777996])), Node{3, Float64}(Vec{3, Float64}([0.2385402878701031, 0.8840828315372561, 0.401865746293356])), Node{3, Float64}(Vec{3, Float64}([0.3202716698270346, 0.9073212836261295, 0.2723860234763078])), Node{3, Float64}(Vec{3, Float64}([0.4952028722369954, 0.2937058432940815, -0.8176252154521302])), Node{3, Float64}(Vec{3, Float64}([0.4807666954801422, 0.14277464520842, -0.8651466842118243])), Node{3, Float64}(Vec{3, Float64}([0.2097581095101268, 0.8366775119301604, -0.5059370282209971])), Node{3, Float64}(Vec{3, Float64}([0.3530331838368958, 0.8403742632611918, -0.4112647185915582])), Node{3, Float64}(Vec{3, Float64}([0.3346291186030667, 0.7512739776755296, -0.5688679666236468])), Node{3, Float64}(Vec{3, Float64}([0.6689515759624485, 0.4200018672487527, -0.6132717346535038])), Node{3, Float64}(Vec{3, Float64}([0.7869752051651558, 0.4038230887968113, -0.4664728710331004])), Node{3, Float64}(Vec{3, Float64}([0.2018026321214373, -0.7550236768721734, 0.6238709361969698])), Node{3, Float64}(Vec{3, Float64}([0.09352669934367819, -0.8488049560459022, 0.5203680458116073])), Node{3, Float64}(Vec{3, Float64}([0.1806532628358759, 0.9689562417600709, 0.1687844784953606])), Node{3, Float64}(Vec{3, Float64}([0.6422403154196703, 0.1365902667938289, 0.7542350272075893])), Node{3, Float64}(Vec{3, Float64}([0.518980334562054, 0.1384535369461364, 0.8434986843172687])), Node{3, Float64}(Vec{3, Float64}([0.3365505527329855, 0.1417845340971681, -0.9309301108815693])), Node{3, Float64}(Vec{3, Float64}([0.7084236363909234, 0.5995838756689253, -0.372337383887908])), Node{3, Float64}(Vec{3, Float64}([0.5918900107989608, 0.6454697372065687, -0.4827370230952763])), Node{3, Float64}(Vec{3, Float64}([-0.09617805147199697, -0.9410009578483924, -0.3244487320725077])), Node{3, Float64}(Vec{3, Float64}([-0.008857305851186017, -0.8889007546359253, -0.4580141881434909])), Node{3, Float64}(Vec{3, Float64}([0.03446980360138813, -0.9513793942881288, -0.3060867209854671])), Node{3, Float64}(Vec{3, Float64}([-0.2064717427221315, -0.7839165299474179, 0.5855290714665541])), Node{3, Float64}(Vec{3, Float64}([-0.3134931887750755, -0.8156079642215704, 0.4863184854495872])), Node{3, Float64}(Vec{3, Float64}([-0.2058081558961733, 0.1525169606407194, -0.9666341498641219])), Node{3, Float64}(Vec{3, Float64}([0.0762764815464823, 0.9522489584793316, -0.2956413696320547])), Node{3, Float64}(Vec{3, Float64}([0.0479457662942076, 0.9923082078057626, -0.1141298568113387])), Node{3, Float64}(Vec{3, Float64}([-0.2457265820487158, -0.8951230275735126, -0.3719855002312379])), Node{3, Float64}(Vec{3, Float64}([-0.2028738692444309, -0.9545292609070645, -0.218440113646754])), Node{3, Float64}(Vec{3, Float64}([0.08756598351711731, 0.815277154674418, -0.5724118793287445])), Node{3, Float64}(Vec{3, Float64}([0.1061942567274575, 0.9035752100356188, -0.4150597784020877])), Node{3, Float64}(Vec{3, Float64}([-0.152730277006816, 0.8737441168490759, -0.4617842361504447])), Node{3, Float64}(Vec{3, Float64}([-0.1833588609992844, 0.9215499573194428, -0.3422355975896988])), Node{3, Float64}(Vec{3, Float64}([-0.04489447462810287, 0.9306963497830256, -0.3630272588228309])), Node{3, Float64}(Vec{3, Float64}([-0.1012608213635433, 0.4504976287511153, -0.8870164218019884])), Node{3, Float64}(Vec{3, Float64}([0.0685446365640204, 0.5498535192386114, -0.8324438360509496])), Node{3, Float64}(Vec{3, Float64}([-0.8100290214525329, -0.188681994566597, 0.5552045472895757])), Node{3, Float64}(Vec{3, Float64}([-0.7238438086407637, -0.1013953219111857, 0.6824728048698795])), Node{3, Float64}(Vec{3, Float64}([-0.7996624069436236, -0.04015261892324228, 0.5991058354871328])), Node{3, Float64}(Vec{3, Float64}([-0.4874952684675413, 0.05971237285273778, -0.8710813944460388])), Node{3, Float64}(Vec{3, Float64}([-0.5647121613841567, -0.07349482148724142, -0.8220089330411152])), Node{3, Float64}(Vec{3, Float64}([-0.5880723583569459, 0.09552981694137508, -0.8031469077395785])), Node{3, Float64}(Vec{3, Float64}([-0.7385637143848578, -0.5908267074375698, 0.3247267182917389])), Node{3, Float64}(Vec{3, Float64}([-0.7265273153042298, -0.5061321699549329, 0.464745399819664])), Node{3, Float64}(Vec{3, Float64}([-0.8148322410887947, -0.4879583710094259, 0.3129617341529791])), Node{3, Float64}(Vec{3, Float64}([-0.1403863090370816, -0.5940425703188702, 0.7920890788818485])), Node{3, Float64}(Vec{3, Float64}([-0.0935836594330627, -0.7247216019658455, 0.6826570869266466])), Node{3, Float64}(Vec{3, Float64}([-0.06041369391458373, -0.8265954010614104, 0.5595446617846702])), Node{3, Float64}(Vec{3, Float64}([-0.4952110375892373, -0.8293197608262471, 0.2588334649014444])), Node{3, Float64}(Vec{3, Float64}([-0.4873417933102854, -0.8655832049204623, 0.1151681025837283])), Node{3, Float64}(Vec{3, Float64}([-0.6246680213152622, -0.6823649107780365, 0.3796946031812375])), Node{3, Float64}(Vec{3, Float64}([-0.3290655716766472, 0.8917550649406492, -0.3106263892360402])), Node{3, Float64}(Vec{3, Float64}([-0.221755384215263, 0.9516162010217575, -0.2127231899075863])), Node{3, Float64}(Vec{3, Float64}([0.3105915443730735, -0.634729208498831, 0.7075674698870749])), Node{3, Float64}(Vec{3, Float64}([0.3317615836590406, 0.5017044543876853, 0.7988910389130675])), Node{3, Float64}(Vec{3, Float64}([0.3124150216366368, 0.3763818775658063, 0.8722003992752])), Node{3, Float64}(Vec{3, Float64}([0.1807402144265811, -0.9310686864040988, -0.3169291341716306])), Node{3, Float64}(Vec{3, Float64}([0.09396849353152072, -0.9788834057268605, -0.1815411804963242])), Node{3, Float64}(Vec{3, Float64}([-0.322255871037164, -0.4292062848445076, -0.8437612924471317])), Node{3, Float64}(Vec{3, Float64}([-0.1782902717351326, -0.3830446435520702, -0.9063605132896513])), Node{3, Float64}(Vec{3, Float64}([-0.19340613840889, -0.5227337077285462, -0.8302671476278753])), Node{3, Float64}(Vec{3, Float64}([-0.4162464851027778, 0.4230147909369038, 0.8048585902431499])), Node{3, Float64}(Vec{3, Float64}([-0.4331990223596263, 0.5511214153871168, 0.7131646321350807])), Node{3, Float64}(Vec{3, Float64}([-0.5481188313529554, 0.441439437927701, 0.7104202765675723])), Node{3, Float64}(Vec{3, Float64}([-0.5668763028978968, 0.7835537984605314, -0.2543515325900063])), Node{3, Float64}(Vec{3, Float64}([-0.6170959754126276, 0.6876879833178225, -0.3824628017596012])), Node{3, Float64}(Vec{3, Float64}([-0.6754068549801141, 0.684971350567184, -0.2732029083813698])), Node{3, Float64}(Vec{3, Float64}([0.757925642990945, -0.61370471292484, -0.2211679113944935])), Node{3, Float64}(Vec{3, Float64}([0.7231993364532351, -0.5855807725179353, -0.3661664629794741])), Node{3, Float64}(Vec{3, Float64}([0.9125794545153904, -0.124425875031777, 0.3895085888898589])), Node{3, Float64}(Vec{3, Float64}([0.9134303470282008, -0.2612024589734687, 0.3121190102415329])), Node{3, Float64}(Vec{3, Float64}([0.9623708544281466, -0.136487344958836, 0.2349756225937637])), Node{3, Float64}(Vec{3, Float64}([-0.7593379046844757, 0.595153813471172, -0.2630549083748705])), Node{3, Float64}(Vec{3, Float64}([-0.7092597960666346, 0.6917920458207231, -0.135551861007861])), Node{3, Float64}(Vec{3, Float64}([0.5764751345390667, -0.5857420203359899, 0.5697216029525981])), Node{3, Float64}(Vec{3, Float64}([0.4499630952674156, -0.6182509819370774, 0.6444369140817482])), Node{3, Float64}(Vec{3, Float64}([0.1367005011901835, 0.3341097010425604, 0.9325683249197366])), Node{3, Float64}(Vec{3, Float64}([0.2686657471235331, 0.236209681105958, 0.9338220938028696])), Node{3, Float64}(Vec{3, Float64}([0.3565173295452644, 0.6215852318628433, 0.6975150129308535])), Node{3, Float64}(Vec{3, Float64}([0.207121089491918, 0.5962070831674082, 0.7756532525998276])), Node{3, Float64}(Vec{3, Float64}([-0.05192298346270467, -0.8022707307221758, -0.594697972432089])), Node{3, Float64}(Vec{3, Float64}([0.07866794841295095, -0.8132122749841446, -0.5766256582112951])), Node{3, Float64}(Vec{3, Float64}([0.841526607167567, -0.3793492780478508, 0.3846129153754692])), Node{3, Float64}(Vec{3, Float64}([0.8910208472660452, -0.3913942847163828, 0.2299833985935724])), Node{3, Float64}(Vec{3, Float64}([-0.787836155599984, 0.08764181975741209, 0.6096171777099519])), Node{3, Float64}(Vec{3, Float64}([-0.8752176091037308, -0.0002216195590010127, 0.4837293536674408])), Node{3, Float64}(Vec{3, Float64}([0.4860050976262166, 0.626114419479667, 0.6097374671126674])), Node{3, Float64}(Vec{3, Float64}([0.3626585882943681, 0.7223402087171052, 0.5888152267111176])), Node{3, Float64}(Vec{3, Float64}([0.08447537401738492, 0.6885518339266709, 0.7202501531973744])), Node{3, Float64}(Vec{3, Float64}([0.05909741092768585, 0.5682030838451723, 0.8207635174217238])), Node{3, Float64}(Vec{3, Float64}([0.9876735427012736, -0.1354117038699361, -0.07851524376168074])), Node{3, Float64}(Vec{3, Float64}([0.962555582929456, -0.1353637768404359, -0.2348688946855838])), Node{3, Float64}(Vec{3, Float64}([0.3996701713317582, 0.4203916996842824, -0.8145763150154829])), Node{3, Float64}(Vec{3, Float64}([0.5329750886969256, 0.4294995576882509, -0.7290183020844546])), Node{3, Float64}(Vec{3, Float64}([-0.08975276847389943, 0.5212664044515374, 0.8486611668630991])), Node{3, Float64}(Vec{3, Float64}([0.0329505895810924, 0.4282498339790287, 0.9030594323427406])), Node{3, Float64}(Vec{3, Float64}([0.1122138715519651, 0.7920490241149769, 0.6000553228076824])), Node{3, Float64}(Vec{3, Float64}([-0.03589994213276124, 0.7636604208599851, 0.6446192331654516])), Node{3, Float64}(Vec{3, Float64}([0.3106505773151498, 0.5302809066875225, -0.7888589093218275])), Node{3, Float64}(Vec{3, Float64}([-0.158123514019003, 0.810820623680898, 0.5635307183534911])), Node{3, Float64}(Vec{3, Float64}([-0.1855125707528334, 0.7064313721194833, 0.6830371897474246])), Node{3, Float64}(Vec{3, Float64}([0.1877733526189701, 0.6247991086303873, -0.757870201222416])), Node{3, Float64}(Vec{3, Float64}([0.313495873215334, 0.649463445125626, -0.6927608324108027])), Node{3, Float64}(Vec{3, Float64}([-0.1307718419163033, 0.8929150180915983, 0.4308149206193979])), Node{3, Float64}(Vec{3, Float64}([-0.2805744905838942, 0.8368134727436831, 0.4701288834652105])), Node{3, Float64}(Vec{3, Float64}([0.4575591470209527, 0.6561549514413217, -0.6000835830753037])), Node{3, Float64}(Vec{3, Float64}([-0.3924815585980144, 0.8470113201491497, 0.3585108780771765])), Node{3, Float64}(Vec{3, Float64}([-0.4196236363933917, 0.763762583437065, 0.4904923240189666])), Node{3, Float64}(Vec{3, Float64}([-0.5481464617789321, 0.6715529215589546, 0.4985500275648074])), Node{3, Float64}(Vec{3, Float64}([-0.4362393452212153, 0.6613549138267288, 0.6101679372420395])), Node{3, Float64}(Vec{3, Float64}([-0.3554945100305658, 0.9090111756767585, 0.2175369757831649])), Node{3, Float64}(Vec{3, Float64}([-0.494543703079635, 0.8359604506965328, 0.2379005057067588])), Node{3, Float64}(Vec{3, Float64}([-0.2128269270241551, 0.958269374966535, 0.1908520477613516])), Node{3, Float64}(Vec{3, Float64}([-0.3146689712204007, 0.9466010833250544, 0.0702127310316875])), Node{3, Float64}(Vec{3, Float64}([-0.6463027579822127, 0.6649044513180603, 0.3744259815264088])), Node{3, Float64}(Vec{3, Float64}([-0.6629184867709947, 0.562496819632256, 0.4941016168773908])), Node{3, Float64}(Vec{3, Float64}([-0.2702558308207971, 0.9602959050197721, -0.069235545131223])), Node{3, Float64}(Vec{3, Float64}([-0.4123757347552374, 0.910019481583446, -0.04255345489703447])), Node{3, Float64}(Vec{3, Float64}([-0.761060798127898, 0.439330178745239, 0.4772582692804843])), Node{3, Float64}(Vec{3, Float64}([-0.6629044956353347, 0.4459786408998859, 0.6013823089579149])), Node{3, Float64}(Vec{3, Float64}([-0.1236722881720143, 0.9872789376896168, -0.09992729523388492])), Node{3, Float64}(Vec{3, Float64}([-0.496480026490505, 0.8525148984278145, -0.1634806754775644])), Node{3, Float64}(Vec{3, Float64}([-0.5417207277341021, 0.840210652237237, -0.02418083973545414])), Node{3, Float64}(Vec{3, Float64}([-0.6462611446266351, 0.3182727988220517, 0.6935769304668729])), Node{3, Float64}(Vec{3, Float64}([-0.8401253965540856, 0.4216608343301738, 0.3411619246880023])), Node{3, Float64}(Vec{3, Float64}([-0.840111407408685, 0.3051426573741418, 0.4484426181714286])), Node{3, Float64}(Vec{3, Float64}([-0.8227232931508305, 0.5215984968541194, 0.225967676862369])), Node{3, Float64}(Vec{3, Float64}([-0.9008259137983081, 0.3869510520166489, 0.196930333805262])), Node{3, Float64}(Vec{3, Float64}([-0.0007082200542144339, 0.9995502668555561, 0.02997936712709563])), Node{3, Float64}(Vec{3, Float64}([-0.734133306154714, 0.1853521747994918, 0.6532173145986316])), Node{3, Float64}(Vec{3, Float64}([-0.6202255363462169, 0.1810583996156177, 0.7632418620546693])), Node{3, Float64}(Vec{3, Float64}([-0.9362214313439827, 0.3481209551961459, 0.04797115847618444])), Node{3, Float64}(Vec{3, Float64}([-0.9547284340501491, 0.2486666872696906, 0.1632742963802572])), Node{3, Float64}(Vec{3, Float64}([-0.5848000102459227, 0.044298936891632, 0.8099670068630204])), Node{3, Float64}(Vec{3, Float64}([-0.4965908178558643, 0.1769410319603592, 0.8497584544033951])), Node{3, Float64}(Vec{3, Float64}([-0.8953965297927642, 0.4406715052320633, -0.06382537827215073])), Node{3, Float64}(Vec{3, Float64}([-0.9482694156223952, 0.3021037038661378, -0.09756263375658815])), Node{3, Float64}(Vec{3, Float64}([0.3019618553733321, -0.2756220913147118, -0.912606980402188])), Node{3, Float64}(Vec{3, Float64}([0.2271380954738933, -0.1331638137907526, -0.9647153384709887])), Node{3, Float64}(Vec{3, Float64}([0.3878103919590518, -0.1421975980380667, -0.9107046409241424])), Node{3, Float64}(Vec{3, Float64}([-0.9369050111411876, 0.2481997928410961, -0.2461825804807642])), Node{3, Float64}(Vec{3, Float64}([-0.9785926771390033, 0.1558067784972131, -0.1344641960680937])), Node{3, Float64}(Vec{3, Float64}([0.5282214241736545, -0.1419406384665708, -0.8371588751220753])), Node{3, Float64}(Vec{3, Float64}([-0.4020019609428824, 0.6013169613968745, -0.6905159920917885])), Node{3, Float64}(Vec{3, Float64}([-0.4732654276748655, 0.4706425543409961, -0.744657922143523])), Node{3, Float64}(Vec{3, Float64}([-0.5414331465859181, 0.5564136667692539, -0.6302808732703742])), Node{3, Float64}(Vec{3, Float64}([0.3589959162759854, -0.404992941594389, -0.8408939584489173])), Node{3, Float64}(Vec{3, Float64}([0.1989486079820185, -0.3961509430625589, -0.8963726243547726])), Node{3, Float64}(Vec{3, Float64}([-0.8702044802687291, 0.3392587289344006, -0.3572781512519984])), Node{3, Float64}(Vec{3, Float64}([-0.8988249367589654, 0.1923855735424944, -0.3938293083976451])), Node{3, Float64}(Vec{3, Float64}([-0.9869131912307179, 0.001268299985986442, -0.1612474632046844])), Node{3, Float64}(Vec{3, Float64}([-0.9983887594284004, 0.05533945819758467, -0.01254708784608071])), Node{3, Float64}(Vec{3, Float64}([-0.6692267315526862, 0.5066431698251569, -0.5435515433193306])), Node{3, Float64}(Vec{3, Float64}([-0.7218064133674763, 0.3543965617122437, -0.594473362454635])), Node{3, Float64}(Vec{3, Float64}([-0.7781515414218119, 0.434898673878503, -0.4531482340709029])), Node{3, Float64}(Vec{3, Float64}([-0.4210507257014757, 0.3728416538882094, -0.8268647939730929])), Node{3, Float64}(Vec{3, Float64}([-0.5580828212769872, 0.3263222722389312, -0.7629268242999058])), Node{3, Float64}(Vec{3, Float64}([-0.8162336632847979, 0.490553533411365, -0.3051554321625363])), Node{3, Float64}(Vec{3, Float64}([-0.5968127935741887, 0.6365565969759073, -0.488477418385564])), Node{3, Float64}(Vec{3, Float64}([0.4370993679935225, -0.6261478236123549, -0.6456648089257881])), Node{3, Float64}(Vec{3, Float64}([0.2952706472573103, -0.6327450216819976, -0.7158554200429702])), Node{3, Float64}(Vec{3, Float64}([0.3983186758333332, -0.5193770604741671, -0.7560355160543673])), Node{3, Float64}(Vec{3, Float64}([0.184815568197596, -0.7302401747979335, -0.6577176391605164])), Node{3, Float64}(Vec{3, Float64}([0.1460348760374656, -0.6234694116598313, -0.7680883462891921])), Node{3, Float64}(Vec{3, Float64}([-0.3206540213838944, 0.7169069530750435, -0.6190520327104939])), Node{3, Float64}(Vec{3, Float64}([-0.2524863024734428, 0.6311358406474086, -0.733429081584292])), Node{3, Float64}(Vec{3, Float64}([-0.6867078407390084, -0.4204782178914014, -0.5929843250427788])), Node{3, Float64}(Vec{3, Float64}([-0.7041210116475796, -0.5264215862129078, -0.4765437173287203])), Node{3, Float64}(Vec{3, Float64}([-0.788035817304251, -0.3921078410612043, -0.4746061436854169])), Node{3, Float64}(Vec{3, Float64}([0.4999618657837513, -0.3976931247187634, -0.7693362797330282])), Node{3, Float64}(Vec{3, Float64}([-0.9502377541341359, -0.0540169452632567, -0.3068067473875692])), Node{3, Float64}(Vec{3, Float64}([-0.9705276666443969, -0.154504730308444, -0.1849441445142213])), Node{3, Float64}(Vec{3, Float64}([-0.9371199652844581, -0.3427639615898718, 0.06571938298913997])), Node{3, Float64}(Vec{3, Float64}([-0.97795145338464, -0.1904012164058499, 0.08578071819495986])), Node{3, Float64}(Vec{3, Float64}([-0.9660165644500046, -0.2515642090994519, -0.05939230512766196])), Node{3, Float64}(Vec{3, Float64}([-0.8521822472821999, -0.2479578233197963, -0.4607627754838363])), Node{3, Float64}(Vec{3, Float64}([-0.8695954181903249, -0.3539011916410102, -0.3443221677694695])), Node{3, Float64}(Vec{3, Float64}([-0.243930050315949, 0.4086097983025161, -0.8795090467323435])), Node{3, Float64}(Vec{3, Float64}([-0.3321490817328884, 0.2666518154020374, -0.9047506821477378])), Node{3, Float64}(Vec{3, Float64}([-0.006864272186686632, -0.5985536780778402, -0.8010532917520758])), Node{3, Float64}(Vec{3, Float64}([0.103590806872948, -0.5010585249617543, -0.8591910726343487])), Node{3, Float64}(Vec{3, Float64}([0.526012994409288, -0.1399409754501086, 0.8388842906519626])), Node{3, Float64}(Vec{3, Float64}([0.5833668005659335, -0.2736854069895577, 0.7647087510931377])), Node{3, Float64}(Vec{3, Float64}([0.652964429944898, -0.1338581720178876, 0.7454659234403433])), Node{3, Float64}(Vec{3, Float64}([0.2277387084268972, -0.8210837179722689, -0.5234086441442138])), Node{3, Float64}(Vec{3, Float64}([0.7633751590514811, -0.133565324321361, 0.6319957837533852])), Node{3, Float64}(Vec{3, Float64}([-0.1906624188039298, 0.5556309638694927, -0.8092725585643525])), Node{3, Float64}(Vec{3, Float64}([-0.9294260394832392, -0.3068405018355806, -0.2049783977978882])), Node{3, Float64}(Vec{3, Float64}([-0.441537999511619, -0.4485043534995242, -0.7771023355255415])), Node{3, Float64}(Vec{3, Float64}([-0.4699860734411549, -0.5616193305547382, -0.6809528752554123])), Node{3, Float64}(Vec{3, Float64}([-0.5736380198062837, -0.4411173587867745, -0.6901846839866165])), Node{3, Float64}(Vec{3, Float64}([-0.7196254345677959, -0.1620474401394285, -0.675188759583103])), Node{3, Float64}(Vec{3, Float64}([-0.6071907074905232, -0.1831782318898343, -0.7731527534057369])), Node{3, Float64}(Vec{3, Float64}([-0.6574063990577904, -0.3069292313247775, -0.6881942120043225])), Node{3, Float64}(Vec{3, Float64}([-0.3836785770926928, 0.1165641022425116, -0.9160805420641375])), Node{3, Float64}(Vec{3, Float64}([-0.8652823250592214, -0.4510016745656371, -0.2188241016869463])), Node{3, Float64}(Vec{3, Float64}([0.9157833093812333, 0.1365902667938345, -0.3777353958473384])), Node{3, Float64}(Vec{3, Float64}([0.9875116071805189, -0.1365383354318801, 0.07860094554927287])), Node{3, Float64}(Vec{3, Float64}([0.9157833093812335, 0.1365902667938334, 0.3777353958473381])), Node{3, Float64}(Vec{3, Float64}([0.843878278167329, 0.1365902667938334, 0.5188569655064231])), Node{3, Float64}(Vec{3, Float64}([0.7542350272075862, 0.1365902667938289, 0.6422403154196741])), Node{3, Float64}(Vec{3, Float64}([0.07625510389218465, -0.1365902667937803, 0.9876883405951474])), Node{3, Float64}(Vec{3, Float64}([0.2326895689324151, -0.1365902667937811, 0.9629115554022865])), Node{3, Float64}(Vec{3, Float64}([-0.4699075412481317, -0.8721698826553775, -0.1360389593720873])), Node{3, Float64}(Vec{3, Float64}([-0.5944040536192412, -0.7856466293750751, -0.171590194336966])), Node{3, Float64}(Vec{3, Float64}([-0.477277849675194, -0.825100570737057, -0.3023489744960378])), Node{3, Float64}(Vec{3, Float64}([-0.36117349475171, -0.8378749883009095, -0.4092911074877968])), Node{3, Float64}(Vec{3, Float64}([-0.4858495922008812, -0.7523941498362795, -0.4448069435725793])), Node{3, Float64}(Vec{3, Float64}([-0.8452573559314468, -0.2669065929294978, 0.4629264227655912])), Node{3, Float64}(Vec{3, Float64}([-0.917391579690073, -0.2047605758338365, 0.3412708544513404])), Node{3, Float64}(Vec{3, Float64}([-0.8778828373170501, -0.3440420004624836, 0.3331018250654567])), Node{3, Float64}(Vec{3, Float64}([-0.6025428861561597, -0.6475297137334276, -0.4665268911594599])), Node{3, Float64}(Vec{3, Float64}([-0.7038708627214931, -0.6191593369034676, -0.3481487098022326])), Node{3, Float64}(Vec{3, Float64}([-0.872790689284087, -0.4860077629855852, 0.0450873265647428])), Node{3, Float64}(Vec{3, Float64}([-0.8850075604227879, -0.4249228419511334, 0.1902687477823865])), Node{3, Float64}(Vec{3, Float64}([-0.48609974112647, -0.6596563991453307, -0.5732019510987336])), Node{3, Float64}(Vec{3, Float64}([-0.4227426662385176, -0.8258589650520745, 0.3731562782329487])), Node{3, Float64}(Vec{3, Float64}([-0.2820177934456971, -0.8941009714837342, 0.3479215672703587])), Node{3, Float64}(Vec{3, Float64}([-0.01923444758254738, -0.9063993974062163, 0.4219836115394083])), Node{3, Float64}(Vec{3, Float64}([-0.246296004576658, -0.9477955278953089, 0.2025386763836177])), Node{3, Float64}(Vec{3, Float64}([-0.1374668655797437, -0.9387187715080921, 0.3160853189979235])), Node{3, Float64}(Vec{3, Float64}([0.01639239069385679, -0.9608147746076424, 0.2767060867111623])), Node{3, Float64}(Vec{3, Float64}([-0.07743672887312741, -0.9969971211100097, 0.0005417746600427727])), Node{3, Float64}(Vec{3, Float64}([0.07295060529515755, -0.9961972606519263, -0.0476364047412075])), Node{3, Float64}(Vec{3, Float64}([0.04816326036481886, -0.991276709198399, 0.1226816455376401])), Node{3, Float64}(Vec{3, Float64}([0.166439409521788, -0.9591945647902214, 0.2285688295348611])), Node{3, Float64}(Vec{3, Float64}([0.3133666515952263, -0.9331489747497514, 0.176165639644863])), Node{3, Float64}(Vec{3, Float64}([0.3289575110705654, -0.9441936248571446, 0.0168924447426751])), Node{3, Float64}(Vec{3, Float64}([0.4444396265595822, -0.8879615242623783, 0.1183120863361513])), Node{3, Float64}(Vec{3, Float64}([0.5696037197834904, -0.8202742287702681, 0.05197876512724013])), Node{3, Float64}(Vec{3, Float64}([0.5526574432681238, -0.8062612698564164, 0.2109798927145885])), Node{3, Float64}(Vec{3, Float64}([0.5809690740617446, 0.8027845426838148, 0.1342084684801123])), Node{3, Float64}(Vec{3, Float64}([0.6090893132472444, 0.7907426935912008, -0.0611244715325434])), Node{3, Float64}(Vec{3, Float64}([0.6414276713468627, -0.7086295507460699, 0.2939637770882053])), Node{3, Float64}(Vec{3, Float64}([0.7108783636267805, 0.6951892925125782, -0.1066011243053836])), Node{3, Float64}(Vec{3, Float64}([0.7125623467626934, -0.5942947422970346, 0.3729191081912328])), Node{3, Float64}(Vec{3, Float64}([0.7487541782944329, -0.6239440098218081, 0.2237432749695777])), Node{3, Float64}(Vec{3, Float64}([0.798382078200697, 0.5824102569751053, -0.1529194225012897])), Node{3, Float64}(Vec{3, Float64}([0.7931601551394211, 0.6090052222808962, -0.003099602201179567])), Node{3, Float64}(Vec{3, Float64}([-0.2570792258064055, -0.3269175564613023, 0.9094147474811206])), Node{3, Float64}(Vec{3, Float64}([-0.1977621389173096, -0.4658207858640256, 0.8624970329617792])), Node{3, Float64}(Vec{3, Float64}([-0.1010280712438474, -0.3680246143730472, 0.9243112095156685])), Node{3, Float64}(Vec{3, Float64}([0.7703383206583451, -0.6336525790790649, 0.07115673370616747])), Node{3, Float64}(Vec{3, Float64}([0.8413202524842284, -0.519248706958323, 0.1502032392526327])), Node{3, Float64}(Vec{3, Float64}([0.7690099638371638, 0.6218849075843607, 0.1479284869048394])), Node{3, Float64}(Vec{3, Float64}([0.8552693351767113, 0.5081203364137264, 0.1016272012267758])), Node{3, Float64}(Vec{3, Float64}([0.5822913734563776, -0.2616321633642672, -0.7697307110227698])), Node{3, Float64}(Vec{3, Float64}([0.6225214526424293, -0.376470825296953, -0.6861025861343119])), Node{3, Float64}(Vec{3, Float64}([-0.004129942990790267, -0.2514826228565412, 0.9678530022540032])), Node{3, Float64}(Vec{3, Float64}([0.05560341415408286, -0.3896833880003884, 0.9192687949946676])), Node{3, Float64}(Vec{3, Float64}([0.9127628616654323, -0.4010881622229793, 0.07740958912772922])), Node{3, Float64}(Vec{3, Float64}([0.8436162887974039, -0.5164226137548261, -0.1470348301537048])), Node{3, Float64}(Vec{3, Float64}([0.8940112170443153, -0.3878030161559564, -0.2243942166351112])), Node{3, Float64}(Vec{3, Float64}([0.9130562814731005, -0.3999705327723329, -0.07969817925354608])), Node{3, Float64}(Vec{3, Float64}([0.9623343457488612, -0.2718687214308329, 7.279886956990456e-5])), Node{3, Float64}(Vec{3, Float64}([-0.6903887418578808, 0.07480795353882534, -0.7195603902406145])), Node{3, Float64}(Vec{3, Float64}([-0.610901091810034, 0.2078648230741924, -0.7639319808423018])), Node{3, Float64}(Vec{3, Float64}([0.9240610585053303, 0.3798508013036161, 0.04271450459749521])), Node{3, Float64}(Vec{3, Float64}([0.8992846577330225, 0.3921142160477211, 0.1937357631912134])), Node{3, Float64}(Vec{3, Float64}([0.7646630878784496, 0.5269038964734087, 0.37102917124848])), Node{3, Float64}(Vec{3, Float64}([0.7860411914514653, 0.4048834141851276, 0.4671281047628748])), Node{3, Float64}(Vec{3, Float64}([0.8495357886986048, 0.3968174344483778, 0.347598716105291])), Node{3, Float64}(Vec{3, Float64}([-0.3039834447078152, 0.6421518560955938, 0.7037293933441706])), Node{3, Float64}(Vec{3, Float64}([0.210659775756013, -0.399117654220182, 0.8923718714573009])), Node{3, Float64}(Vec{3, Float64}([0.573368968480503, 0.5470722693897837, -0.6098852007126554])), Node{3, Float64}(Vec{3, Float64}([-0.09269132811729605, 0.815148167574118, -0.5717882322961967])), Node{3, Float64}(Vec{3, Float64}([-0.178918168433071, -0.9799092416792293, -0.08812585929335909])), Node{3, Float64}(Vec{3, Float64}([-0.3280132242125853, -0.9347803536183605, -0.1363562071590333])), Node{3, Float64}(Vec{3, Float64}([0.07063915686004227, -0.1330423837188072, -0.9885898207307822])), Node{3, Float64}(Vec{3, Float64}([0.3854438817305874, -0.140133207510466, 0.9120283428651138])), Node{3, Float64}(Vec{3, Float64}([0.7783014432841345, 0.272931424381421, 0.5654690981538795])), Node{3, Float64}(Vec{3, Float64}([-0.1173378007324591, -0.6008971941312262, -0.7906670617930717])), Node{3, Float64}(Vec{3, Float64}([-0.2594470861114861, -0.6416928506265566, -0.7217461430191524])), Node{3, Float64}(Vec{3, Float64}([0.8511910513644397, -0.3751138378585335, -0.3671013521142922])), Node{3, Float64}(Vec{3, Float64}([0.9186482452691491, -0.2577239181669966, -0.2994391147939169])), Node{3, Float64}(Vec{3, Float64}([-0.8950326347227991, -0.1019214553340412, -0.4341988020754496])), Node{3, Float64}(Vec{3, Float64}([-0.813522027441998, -0.1401051536670664, -0.564404515203935])), Node{3, Float64}(Vec{3, Float64}([0.9189123213569786, 0.2686212281793364, 0.2888646420553294])), Node{3, Float64}(Vec{3, Float64}([0.6775946472691659, 0.7135574896944564, 0.1780483161760324])), Node{3, Float64}(Vec{3, Float64}([-0.1783060543675457, -0.2901588041743089, -0.940220622692362])), Node{3, Float64}(Vec{3, Float64}([-0.04970340195841469, -0.3816084102723515, -0.9229867783685577])), Node{3, Float64}(Vec{3, Float64}([-0.1548092188860239, -0.1453078357427476, -0.9771999481271261])), Node{3, Float64}(Vec{3, Float64}([-0.2820953627079283, -0.1430613667169504, -0.9486599241518325])), Node{3, Float64}(Vec{3, Float64}([0.4076864535954004, -0.5082207815248614, 0.758619399159463])), Node{3, Float64}(Vec{3, Float64}([0.5007365627201715, -0.3848589644842984, 0.7753363606920942])), Node{3, Float64}(Vec{3, Float64}([0.3628880115796111, -0.402494924950569, 0.8404225880120262])), Node{3, Float64}(Vec{3, Float64}([-0.360117956537737, -0.05294216052438026, -0.9314033417473309])), Node{3, Float64}(Vec{3, Float64}([0.04596669190260437, -0.370567962953961, -0.9276672076060912])), Node{3, Float64}(Vec{3, Float64}([-0.3526577821200925, -0.6652858496306572, -0.6580480430723519])), Node{3, Float64}(Vec{3, Float64}([-0.1614088451345805, -0.7989989261550854, -0.5792649658967314])), Node{3, Float64}(Vec{3, Float64}([-0.07410403331333905, -0.7171111139611475, -0.6930081114100308])), Node{3, Float64}(Vec{3, Float64}([0.9656532177933372, 0.1318996250045812, 0.2238668173022177])), Node{3, Float64}(Vec{3, Float64}([-0.9644491508420416, -0.1300871924109235, 0.2300329494022722])), Node{3, Float64}(Vec{3, Float64}([-0.9937020796022303, -0.03893017398812715, 0.105074347713687])), Node{3, Float64}(Vec{3, Float64}([-0.01199815807148621, 0.2864318649152539, 0.9580254855503905])), Node{3, Float64}(Vec{3, Float64}([-0.6393556898510431, -0.08322032727467728, 0.7643943216582607])), Node{3, Float64}(Vec{3, Float64}([-0.5165412165080514, -0.0867991533980418, 0.8518515590276076])), Node{3, Float64}(Vec{3, Float64}([0.6972487742151814, 0.4053699107387517, 0.5912016426931538])), Node{3, Float64}(Vec{3, Float64}([0.5921991622844112, 0.5315232868670651, 0.6056262442362231])), Node{3, Float64}(Vec{3, Float64}([-0.9104740709174279, 0.05365766243131014, -0.4100705079001096])), Node{3, Float64}(Vec{3, Float64}([-0.7616815948794341, -0.01604427218544652, -0.6477528304468926])), Node{3, Float64}(Vec{3, Float64}([0.2188463123557297, -0.9739450300169591, -0.05947579401372442])), Node{3, Float64}(Vec{3, Float64}([0.7386253413729839, 0.6121391465390688, 0.2823442408763877])), Node{3, Float64}(Vec{3, Float64}([0.9890001748215612, 0.1317088122211004, 0.06731599353963595])), Node{3, Float64}(Vec{3, Float64}([-0.08018376430579395, -0.1146113158162978, 0.9901690816363686])), Node{3, Float64}(Vec{3, Float64}([0.3049255280301877, -0.2766682350807191, 0.9113040711271025])), Node{3, Float64}(Vec{3, Float64}([0.7763012982026471, -0.6257000389570899, -0.07652290936694027])), Node{3, Float64}(Vec{3, Float64}([-0.984541245585959, 0.1154589401272196, 0.1317109292532223])), Node{3, Float64}(Vec{3, Float64}([-0.9314725031737984, -0.05325904517082732, 0.359892275463964])), Node{3, Float64}(Vec{3, Float64}([0.9180832766644963, -0.1224161253420824, -0.3770111263148789])), Node{3, Float64}(Vec{3, Float64}([0.6834510119800878, -0.7299898128883449, -0.003096336970217534])), Node{3, Float64}(Vec{3, Float64}([-0.6646199254490927, 0.7469743441390524, -0.0175978377670384])), Node{3, Float64}(Vec{3, Float64}([-0.5821179609359295, 0.8065034714151952, 0.1033964706894538])), Node{3, Float64}(Vec{3, Float64}([0.3496691947449035, -0.9295328891118306, -0.1170472652643544])), Node{3, Float64}(Vec{3, Float64}([0.8391386506953867, -0.1241922165284149, 0.5295494483642534])), Node{3, Float64}(Vec{3, Float64}([-0.6199270206473616, 0.7455541210391134, 0.2446212208147132])), Node{3, Float64}(Vec{3, Float64}([0.9152652124023423, 0.2659675405464741, -0.3025737238124867])), Node{3, Float64}(Vec{3, Float64}([0.962603524505847, 0.1296376896052586, -0.2378834253215892])), Node{3, Float64}(Vec{3, Float64}([-0.6900255085851493, -0.6862062170247616, -0.2301865009473225])), Node{3, Float64}(Vec{3, Float64}([-0.6164423178357852, -0.5378395676403437, 0.5750890959335719])), Node{3, Float64}(Vec{3, Float64}([-0.5500636780678113, -0.6748031923614654, 0.4920067089474355])), Node{3, Float64}(Vec{3, Float64}([0.6488606375117094, -0.1198331541124125, -0.7514119298117171])), Node{3, Float64}(Vec{3, Float64}([-0.8497705651927016, -0.5174129261719437, -0.1008655063054917])), Node{3, Float64}(Vec{3, Float64}([-0.7900285388645435, -0.5642452117576671, -0.2397545594730157])), Node{3, Float64}(Vec{3, Float64}([-0.1037142423417663, 0.9826052006752157, 0.1540466667652773])), Node{3, Float64}(Vec{3, Float64}([0.06748975470309584, 0.9876988394586417, 0.1410536619239936])), Node{3, Float64}(Vec{3, Float64}([-0.4371759486919584, 0.2679238056402324, 0.8585418011119442])), Node{3, Float64}(Vec{3, Float64}([-0.3247158535960798, 0.3791124722745151, 0.8665064037785724])), Node{3, Float64}(Vec{3, Float64}([0.07688292798448959, 0.9533279066364845, 0.2919844478951405])), Node{3, Float64}(Vec{3, Float64}([0.3778410090116055, 0.1384593156572143, 0.9154590049897525])), Node{3, Float64}(Vec{3, Float64}([-0.1576827896458331, 0.2350354904036504, 0.9591112845234506])), Node{3, Float64}(Vec{3, Float64}([-0.05400117894080696, 0.140929172544829, 0.9885458213956664])), Node{3, Float64}(Vec{3, Float64}([-0.7705025792824782, -0.3273733731400358, 0.54694830640378])), Node{3, Float64}(Vec{3, Float64}([-0.733828994471055, 0.6355818215671665, 0.2398556961319926])), Node{3, Float64}(Vec{3, Float64}([0.9651444781266318, 0.2613245503169452, -0.01433930763034827])), Node{3, Float64}(Vec{3, Float64}([0.9201714000972627, 0.3768624494774446, -0.1061097951034857])), Node{3, Float64}(Vec{3, Float64}([0.5798911265992747, -0.5891386330040097, -0.5627094742347871])), Node{3, Float64}(Vec{3, Float64}([0.4784319539135643, -0.7045135559143051, -0.5241788959958523])), Node{3, Float64}(Vec{3, Float64}([-0.4251983496687697, -0.3081774214431792, -0.8510188249102294])), Node{3, Float64}(Vec{3, Float64}([0.7765177070207885, 0.4953879773286863, -0.3893725755640348])), Node{3, Float64}(Vec{3, Float64}([0.8565921017325232, 0.3647172397833145, -0.3650086386022922])), Node{3, Float64}(Vec{3, Float64}([-0.7940226982721659, 0.6003061343329589, 0.09571049948050947])), Node{3, Float64}(Vec{3, Float64}([0.5968869838950706, 0.6308353917213819, 0.4957546137035705])), Node{3, Float64}(Vec{3, Float64}([-0.5779912110668646, -0.3419490222825389, 0.7409433352756977])), Node{3, Float64}(Vec{3, Float64}([-0.4625123920827334, -0.3194170105561315, 0.8270762120489816])), Node{3, Float64}(Vec{3, Float64}([-0.9475221721749082, 0.1539709806715751, 0.2801690031891055])), Node{3, Float64}(Vec{3, Float64}([0.6747071108420859, 0.619601787643518, 0.4010784702874015])), Node{3, Float64}(Vec{3, Float64}([0.2328877456416279, 0.1546719555691282, -0.9601249315013032])), Node{3, Float64}(Vec{3, Float64}([0.6265817854995227, -0.3785596268874731, 0.6812399540331199])), Node{3, Float64}(Vec{3, Float64}([-0.2310807983494717, 0.3023158406797152, 0.9247739167538669])), Node{3, Float64}(Vec{3, Float64}([-0.2076394925778724, 0.455156717258008, 0.8658626934202197])), Node{3, Float64}(Vec{3, Float64}([0.6820372361557347, -0.552182777534145, -0.4794991018674835])), Node{3, Float64}(Vec{3, Float64}([0.7836564246444181, -0.4711527092145316, -0.4048428494037342])), Node{3, Float64}(Vec{3, Float64}([-0.8418863766844006, 0.1440312038258525, -0.520079168086636])), Node{3, Float64}(Vec{3, Float64}([0.3767207785198958, -0.7986760894660658, -0.4692525536920992])), Node{3, Float64}(Vec{3, Float64}([0.2707566660570601, -0.8811363264188526, -0.3876720289764982])), Node{3, Float64}(Vec{3, Float64}([-0.20302038577057, -0.975759538320815, 0.08170707642254094])), Node{3, Float64}(Vec{3, Float64}([-0.2993665201289762, -0.05755532991459172, 0.9524006880637423])), Node{3, Float64}(Vec{3, Float64}([-0.2773365082440968, -0.215706268559049, 0.9362453027381785])), Node{3, Float64}(Vec{3, Float64}([-0.1803452974479266, -0.0703806821435545, 0.9810821236111821])), Node{3, Float64}(Vec{3, Float64}([0.9881735623024525, 0.1297461585847616, -0.08172481323918034])), Node{3, Float64}(Vec{3, Float64}([-0.1816766789191945, 0.594340136095699, 0.7834241424430561])), Node{3, Float64}(Vec{3, Float64}([-0.6632875046292249, 0.3057849946129251, -0.6830411578172353])), Node{3, Float64}(Vec{3, Float64}([0.8465680589977783, -0.1224518736995606, -0.5180039190123961])), Node{3, Float64}(Vec{3, Float64}([0.3288316734132972, -0.9071587534719924, -0.2625504266980944])), Node{3, Float64}(Vec{3, Float64}([0.7831567735794446, -0.2571354642944096, 0.566168544692067])), Node{3, Float64}(Vec{3, Float64}([-0.4443940986014566, -0.8958144773035723, -0.005505214030948625])), Node{3, Float64}(Vec{3, Float64}([-0.3469532245563868, -0.9309948036402738, 0.1134554342670872])), Node{3, Float64}(Vec{3, Float64}([-0.526896340597277, -0.7515600949546871, 0.3969101534817418])), Node{3, Float64}(Vec{3, Float64}([-0.8501219718147648, 0.4992033480867599, -0.1675966893967345])), Node{3, Float64}(Vec{3, Float64}([0.7598868892387771, -0.1197092535095022, -0.6389378766258987])), Node{3, Float64}(Vec{3, Float64}([-0.4891354601197612, 0.7357075760696891, -0.4684878484732471])), Node{3, Float64}(Vec{3, Float64}([0.641843748825502, -0.4754478896191507, -0.6016526459264696])), Node{3, Float64}(Vec{3, Float64}([0.7233527239134456, -0.3392673106337482, -0.6013805190911511])), Node{3, Float64}(Vec{3, Float64}([-0.4279879705342214, -0.08118212961123222, 0.9001309676429222])), Node{3, Float64}(Vec{3, Float64}([-0.3306179777544047, 0.06471268025228007, 0.9415434253395614])), Node{3, Float64}(Vec{3, Float64}([0.2019517632026157, 0.09630175377839889, 0.9746494023794193])), Node{3, Float64}(Vec{3, Float64}([-0.9245091471798138, 0.0743357574166056, 0.373840917972007])), Node{3, Float64}(Vec{3, Float64}([0.7811045345894254, 0.561729563299899, -0.272645564348188])), Node{3, Float64}(Vec{3, Float64}([-0.8911039784736877, 0.2065897728152223, 0.4040474790374522])), Node{3, Float64}(Vec{3, Float64}([-0.6613890322560853, -0.3596464854178167, 0.65819370517954])), Node{3, Float64}(Vec{3, Float64}([-0.6972087526335947, -0.4389063507505719, 0.5667990565640727])), Node{3, Float64}(Vec{3, Float64}([0.259563497852149, 0.7734286297329461, 0.578303506207748])), Node{3, Float64}(Vec{3, Float64}([0.1405330598035449, 0.85158035217833, 0.5050360015742291])), Node{3, Float64}(Vec{3, Float64}([0.09103304724947064, 0.902064219518706, 0.4218923182194522])), Node{3, Float64}(Vec{3, Float64}([0.7733937053167095, -0.4819118326577272, 0.4118533259802102])), Node{3, Float64}(Vec{3, Float64}([0.667586341491522, -0.5670481369243473, 0.4824778617352216])), Node{3, Float64}(Vec{3, Float64}([-0.02203282878611917, 0.9189639788274571, 0.3937254882190008])), Node{3, Float64}(Vec{3, Float64}([-0.1439031525274477, 0.9429401670882708, 0.3002594278023688])), Node{3, Float64}(Vec{3, Float64}([-0.253457637079517, -0.8201656467089422, -0.5129205963544168])), Node{3, Float64}(Vec{3, Float64}([0.7896919789690157, -0.2423435600499108, -0.5636099513443097])), Node{3, Float64}(Vec{3, Float64}([-0.7512346506241622, 0.6599797903273705, -0.008554300733143554])), Node{3, Float64}(Vec{3, Float64}([-0.8118663992320976, 0.2240277154877136, 0.5391516785574023])), Node{3, Float64}(Vec{3, Float64}([-0.7707216091643333, 0.2343561883722766, -0.5925077030206094])), Node{3, Float64}(Vec{3, Float64}([-0.8380727409538613, 0.5450915749364211, -0.02256669677675981])), Node{3, Float64}(Vec{3, Float64}([-0.2306264289009448, 0.8028042233278251, -0.5498334559658996])), Node{3, Float64}(Vec{3, Float64}([-0.3731913239908971, -0.3124943791027674, 0.8735419272863193])), Node{3, Float64}(Vec{3, Float64}([-0.4807085336277798, -0.207644127591564, 0.8519408559132307])), Node{3, Float64}(Vec{3, Float64}([-0.09924780219876192, 0.0442595983156666, 0.9940779454930339])), Node{3, Float64}(Vec{3, Float64}([-0.379914189202204, 0.7734925446930917, -0.507320896619721])), Node{3, Float64}(Vec{3, Float64}([0.04555020091534852, 0.09581722137612476, 0.9943561933655012])), Node{3, Float64}(Vec{3, Float64}([0.6378143271741331, -0.4731799565441369, 0.6076953289077484])), Node{3, Float64}(Vec{3, Float64}([-0.4394595851588518, 0.8557470690100268, -0.2730791586568961])), Node{3, Float64}(Vec{3, Float64}([0.9056522318404431, 0.3584526626150327, -0.2265076679201342])), Node{3, Float64}(Vec{3, Float64}([-0.652665319029122, -0.2314946294317794, 0.7214140405348773])), Node{3, Float64}(Vec{3, Float64}([0.04492611650645009, -0.2774357320886115, -0.9596932106752163])), Node{3, Float64}(Vec{3, Float64}([-0.02539523828768103, -0.146254364173237, -0.9889209992879078])), Node{3, Float64}(Vec{3, Float64}([-0.5036458235461619, -0.2181246164034643, -0.8359201733080437])), Node{3, Float64}(Vec{3, Float64}([0.7951833195574505, -0.35226177469075, 0.4935535739808972])), Node{3, Float64}(Vec{3, Float64}([-0.7858055963435406, 0.09674042663711176, -0.6108607489512171])), Node{3, Float64}(Vec{3, Float64}([0.8630293496568261, 0.47588292390989, -0.1694573231285373])), Node{3, Float64}(Vec{3, Float64}([0.8082902306621979, -0.3415402903541021, -0.4796010144702433])), Node{3, Float64}(Vec{3, Float64}([-0.2718356916223381, 0.1559877618276075, 0.9496173834340959])), Node{3, Float64}(Vec{3, Float64}([-0.4027870016385948, 0.1319980717457603, 0.9057257533969053])), Node{3, Float64}(Vec{3, Float64}([-0.384553638071954, -0.1987175896440831, -0.9014598266210594])), Node{3, Float64}(Vec{3, Float64}([-0.2754675792977698, -0.739163036807809, -0.6146182699634664])), Node{3, Float64}(Vec{3, Float64}([-0.4003986299414043, 0.8237595090569686, -0.4013741501134177])), Node{3, Float64}(Vec{3, Float64}([0.7182404645660839, -0.3612169982980514, 0.5946872414979503]))] #src

elements = Triangle[Triangle((76, 129, 111)), Triangle((111, 138, 76)), Triangle((91, 117, 116)), Triangle((45, 114, 109)), Triangle((34, 122, 48)), Triangle((45, 109, 46)), Triangle((116, 117, 58)), Triangle((100, 146, 2)), Triangle((5, 21, 18)), Triangle((46, 160, 98)), Triangle((71, 146, 99)), Triangle((27, 122, 34)), Triangle((49, 102, 30)), Triangle((38, 125, 124)), Triangle((12, 146, 71)), Triangle((44, 103, 45)), Triangle((124, 125, 113)), Triangle((98, 126, 46)), Triangle((4, 21, 5)), Triangle((80, 134, 107)), Triangle((20, 36, 13)), Triangle((112, 160, 46)), Triangle((12, 21, 4)), Triangle((80, 114, 103)), Triangle((21, 121, 18)), Triangle((48, 122, 102)), Triangle((109, 112, 46)), Triangle((10, 20, 13)), Triangle((3, 12, 4)), Triangle((44, 121, 103)), Triangle((86, 148, 108)), Triangle((88, 117, 91)), Triangle((99, 146, 100)), Triangle((109, 114, 96)), Triangle((103, 114, 45)), Triangle((110, 148, 86)), Triangle((80, 140, 114)), Triangle((140, 145, 96)), Triangle((99, 134, 71)), Triangle((105, 147, 87)), Triangle((93, 151, 104)), Triangle((76, 157, 89)), Triangle((49, 117, 102)), Triangle((102, 117, 88)), Triangle((90, 138, 111)), Triangle((138, 157, 76)), Triangle((96, 145, 95)), Triangle((102, 122, 30)), Triangle((36, 37, 13)), Triangle((108, 128, 86)), Triangle((131, 141, 130)), Triangle((82, 127, 60)), Triangle((106, 156, 77)), Triangle((24, 124, 113)), Triangle((8, 118, 22)), Triangle((77, 155, 106)), Triangle((27, 137, 122)), Triangle((37, 143, 13)), Triangle((36, 43, 37)), Triangle((108, 148, 59)), Triangle((22, 118, 25)), Triangle((87, 154, 105)), Triangle((36, 98, 43)), Triangle((43, 51, 37)), Triangle((7, 14, 6)), Triangle((12, 33, 21)), Triangle((51, 94, 37)), Triangle((43, 52, 51)), Triangle((12, 71, 33)), Triangle((52, 53, 51)), Triangle((71, 80, 33)), Triangle((52, 55, 53)), Triangle((80, 103, 33)), Triangle((55, 56, 53)), Triangle((56, 60, 53)), Triangle((55, 57, 56)), Triangle((55, 81, 57)), Triangle((56, 61, 60)), Triangle((81, 95, 57)), Triangle((61, 62, 60)), Triangle((81, 96, 95)), Triangle((95, 106, 57)), Triangle((62, 82, 60)), Triangle((61, 63, 62)), Triangle((61, 64, 63)), Triangle((81, 109, 96)), Triangle((62, 87, 82)), Triangle((64, 65, 63)), Triangle((87, 101, 82)), Triangle((64, 66, 65)), Triangle((16, 28, 3)), Triangle((66, 67, 65)), Triangle((4, 16, 3)), Triangle((79, 92, 78)), Triangle((16, 35, 28)), Triangle((66, 68, 67)), Triangle((67, 69, 65)), Triangle((77, 78, 68)), Triangle((92, 93, 78)), Triangle((66, 77, 68)), Triangle((77, 79, 78)), Triangle((39, 40, 35)), Triangle((40, 59, 35)), Triangle((79, 107, 92)), Triangle((74, 83, 73)), Triangle((16, 39, 35)), Triangle((67, 70, 69)), Triangle((72, 75, 69)), Triangle((70, 74, 73)), Triangle((92, 99, 93)), Triangle((59, 130, 35)), Triangle((10, 29, 15)), Triangle((40, 108, 59)), Triangle((10, 15, 9)), Triangle((107, 134, 92)), Triangle((70, 72, 69)), Triangle((85, 131, 83)), Triangle((74, 104, 85)), Triangle((99, 100, 93)), Triangle((70, 73, 72)), Triangle((5, 18, 6)), Triangle((8, 22, 7)), Triangle((8, 17, 9)), Triangle((9, 20, 10)), Triangle((1, 19, 11)), Triangle((74, 85, 83)), Triangle((110, 111, 84)), Triangle((97, 110, 84)), Triangle((89, 105, 75)), Triangle((83, 84, 73)), Triangle((72, 76, 75)), Triangle((83, 97, 84)), Triangle((76, 89, 75)), Triangle((88, 91, 90)), Triangle((48, 102, 88)), Triangle((88, 90, 54)), Triangle((48, 88, 54)), Triangle((54, 86, 47)), Triangle((48, 54, 47)), Triangle((34, 48, 47)), Triangle((34, 47, 38)), Triangle((34, 38, 26)), Triangle((45, 46, 42)), Triangle((27, 34, 26)), Triangle((44, 45, 42)), Triangle((25, 27, 26)), Triangle((41, 44, 42)), Triangle((50, 58, 49)), Triangle((25, 26, 23)), Triangle((41, 42, 32)), Triangle((16, 119, 39)), Triangle((19, 50, 49)), Triangle((22, 25, 23)), Triangle((23, 24, 14)), Triangle((7, 22, 14)), Triangle((104, 153, 93)), Triangle((31, 41, 32)), Triangle((32, 123, 17)), Triangle((60, 127, 53)), Triangle((19, 49, 30)), Triangle((22, 23, 14)), Triangle((103, 121, 33)), Triangle((107, 140, 80)), Triangle((86, 142, 110)), Triangle((3, 28, 2)), Triangle((11, 29, 10)), Triangle((17, 20, 9)), Triangle((130, 161, 131)), Triangle((24, 136, 14)), Triangle((70, 133, 74)), Triangle((31, 32, 17)), Triangle((46, 126, 42)), Triangle((141, 152, 130)), Triangle((100, 152, 141)), Triangle((30, 137, 29)), Triangle((100, 151, 93)), Triangle((35, 130, 28)), Triangle((83, 131, 97)), Triangle((92, 134, 99)), Triangle((148, 161, 59)), Triangle((8, 31, 17)), Triangle((59, 161, 130)), Triangle((75, 132, 69)), Triangle((94, 143, 37)), Triangle((87, 115, 101)), Triangle((20, 123, 36)), Triangle((67, 133, 70)), Triangle((74, 133, 104)), Triangle((86, 128, 47)), Triangle((42, 126, 32)), Triangle((7, 31, 8)), Triangle((33, 121, 21)), Triangle((1, 50, 19)), Triangle((19, 30, 29)), Triangle((19, 29, 11)), Triangle((23, 124, 24)), Triangle((69, 132, 65)), Triangle((105, 132, 75)), Triangle((14, 136, 6)), Triangle((26, 124, 23)), Triangle((106, 135, 57)), Triangle((47, 128, 38)), Triangle((9, 118, 8)), Triangle((57, 135, 56)), Triangle((18, 139, 6)), Triangle((111, 129, 84)), Triangle((116, 157, 91)), Triangle((38, 124, 26)), Triangle((17, 123, 20)), Triangle((4, 119, 16)), Triangle((71, 134, 80)), Triangle((122, 137, 30)), Triangle((72, 129, 76)), Triangle((84, 129, 73)), Triangle((81, 158, 109)), Triangle((82, 149, 127)), Triangle((109, 158, 112)), Triangle((114, 140, 96)), Triangle((10, 13, 11)), Triangle((73, 129, 72)), Triangle((94, 144, 143)), Triangle((89, 147, 105)), Triangle((56, 135, 61)), Triangle((31, 139, 41)), Triangle((39, 113, 40)), Triangle((85, 141, 131)), Triangle((121, 159, 18)), Triangle((61, 135, 64)), Triangle((36, 123, 98)), Triangle((115, 116, 58)), Triangle((65, 132, 63)), Triangle((32, 126, 123)), Triangle((3, 146, 12)), Triangle((29, 137, 15)), Triangle((127, 149, 94)), Triangle((113, 120, 24)), Triangle((68, 133, 67)), Triangle((40, 125, 108)), Triangle((54, 142, 86)), Triangle((144, 162, 50)), Triangle((7, 139, 31)), Triangle((53, 127, 51)), Triangle((93, 153, 78)), Triangle((6, 136, 5)), Triangle((38, 128, 125)), Triangle((15, 118, 9)), Triangle((111, 142, 90)), Triangle((6, 139, 7)), Triangle((91, 138, 90)), Triangle((66, 155, 77)), Triangle((5, 119, 4)), Triangle((77, 156, 79)), Triangle((39, 120, 113)), Triangle((58, 117, 49)), Triangle((119, 120, 39)), Triangle((101, 162, 144)), Triangle((13, 143, 11)), Triangle((105, 154, 132)), Triangle((44, 159, 121)), Triangle((110, 142, 111)), Triangle((132, 154, 63)), Triangle((116, 147, 89)), Triangle((43, 160, 52)), Triangle((52, 160, 112)), Triangle((90, 142, 54)), Triangle((25, 150, 27)), Triangle((52, 158, 55)), Triangle((51, 127, 94)), Triangle((97, 148, 110)), Triangle((5, 136, 119)), Triangle((106, 155, 135)), Triangle((62, 154, 87)), Triangle((78, 153, 68)), Triangle((135, 155, 64)), Triangle((112, 158, 52)), Triangle((107, 145, 140)), Triangle((58, 162, 115)), Triangle((1, 144, 50)), Triangle((79, 145, 107)), Triangle((11, 143, 1)), Triangle((27, 150, 137)), Triangle((95, 156, 106)), Triangle((18, 159, 139)), Triangle((87, 147, 115)), Triangle((113, 125, 40)), Triangle((28, 152, 2)), Triangle((104, 151, 85)), Triangle((64, 155, 66)), Triangle((118, 150, 25)), Triangle((68, 153, 133)), Triangle((55, 158, 81)), Triangle((63, 154, 62)), Triangle((41, 159, 44)), Triangle((119, 136, 120)), Triangle((139, 159, 41)), Triangle((89, 157, 116)), Triangle((94, 149, 144)), Triangle((115, 162, 101)), Triangle((98, 160, 43)), Triangle((2, 146, 3)), Triangle((101, 149, 82)), Triangle((50, 162, 58)), Triangle((125, 128, 108)), Triangle((133, 153, 104)), Triangle((120, 136, 24)), Triangle((2, 152, 100)), Triangle((141, 151, 100)), Triangle((130, 152, 28)), Triangle((143, 144, 1)), Triangle((123, 126, 98)), Triangle((97, 161, 148)), Triangle((145, 156, 95)), Triangle((15, 150, 118)), Triangle((131, 161, 97)), Triangle((91, 157, 138)), Triangle((115, 147, 116)), Triangle((85, 151, 141)), Triangle((79, 156, 145)), Triangle((137, 150, 15)), Triangle((144, 149, 101))]
nodes = Node{3, Float64}[Node{3, Float64}(Vec{3, Float64}([6.123233995736766e-17, -1.499759782661858e-32, 1.0])), Node{3, Float64}(Vec{3, Float64}([6.123233995736766e-17, -1.499759782661858e-32, -1.0])), Node{3, Float64}(Vec{3, Float64}([0.3090169943749472, -7.568733460868295e-17, -0.9510565162951536])), Node{3, Float64}(Vec{3, Float64}([0.5877852522924729, -1.439658655611993e-16, -0.8090169943749476])), Node{3, Float64}(Vec{3, Float64}([0.8090169943749473, -1.981520145234183e-16, -0.5877852522924734])), Node{3, Float64}(Vec{3, Float64}([0.9510565162951535, -2.329416636978185e-16, -0.3090169943749476])), Node{3, Float64}(Vec{3, Float64}([1.0, -2.449293598294706e-16, -2.449293598294706e-16])), Node{3, Float64}(Vec{3, Float64}([0.9510565162951536, -2.329416636978185e-16, 0.3090169943749472])), Node{3, Float64}(Vec{3, Float64}([0.8090169943749476, -1.981520145234184e-16, 0.5877852522924729])), Node{3, Float64}(Vec{3, Float64}([0.5877852522924734, -1.439658655611994e-16, 0.8090169943749472])), Node{3, Float64}(Vec{3, Float64}([0.3090169943749477, -7.568733460868307e-17, 0.9510565162951535])), Node{3, Float64}(Vec{3, Float64}([0.3569270192488652, 0.280553875011349, -0.8910065241883678])), Node{3, Float64}(Vec{3, Float64}([0.4371529102920968, 0.2734329305187583, 0.8568148957219838])), Node{3, Float64}(Vec{3, Float64}([0.9509980539041696, -0.26748511456887, -0.1550948579243064])), Node{3, Float64}(Vec{3, Float64}([0.7010326263701245, -0.2642085807282103, 0.66237986279339])), Node{3, Float64}(Vec{3, Float64}([0.4557230592119721, -0.2804055822079268, -0.8448012800470386])), Node{3, Float64}(Vec{3, Float64}([0.8579604780797957, 0.2698172279020973, 0.4371526982420629])), Node{3, Float64}(Vec{3, Float64}([0.8579604780797949, 0.2698172279020994, -0.4371526982420629])), Node{3, Float64}(Vec{3, Float64}([0.1506325540503649, -0.2698172279019947, 0.9510565162951921])), Node{3, Float64}(Vec{3, Float64}([0.6808812905078324, 0.2698172279020885, 0.6808812905078397])), Node{3, Float64}(Vec{3, Float64}([0.6212581076243342, 0.2996097381118902, -0.7240665498001932])), Node{3, Float64}(Vec{3, Float64}([0.9503583486325037, -0.269666382128176, 0.1552386921305421])), Node{3, Float64}(Vec{3, Float64}([0.852583363144894, -0.5225860288129365, -0.00233481863673884])), Node{3, Float64}(Vec{3, Float64}([0.8168856169729826, -0.4993851513833295, -0.2886388043221473])), Node{3, Float64}(Vec{3, Float64}([0.810365322419831, -0.5037579254278574, 0.2992256619810952])), Node{3, Float64}(Vec{3, Float64}([0.6692191928879879, -0.7291939860450095, 0.1429048725066452])), Node{3, Float64}(Vec{3, Float64}([0.5982328689380234, -0.6710480447953684, 0.4379634186761435])), Node{3, Float64}(Vec{3, Float64}([0.1396663028336856, -0.2630486925403432, -0.95461966730504])), Node{3, Float64}(Vec{3, Float64}([0.4514631740141711, -0.2764825965481388, 0.8483739601820941])), Node{3, Float64}(Vec{3, Float64}([0.2656805088149847, -0.5189327480995083, 0.812479335236105])), Node{3, Float64}(Vec{3, Float64}([0.9562426915941572, 0.2605200766244171, 0.1331510587579743])), Node{3, Float64}(Vec{3, Float64}([0.8205353904539959, 0.5142067451245198, 0.2496259126792635])), Node{3, Float64}(Vec{3, Float64}([0.4315330339435517, 0.5487851291736285, -0.7159707554176757])), Node{3, Float64}(Vec{3, Float64}([0.4227433703980156, -0.8638491071672681, 0.2739575931249943])), Node{3, Float64}(Vec{3, Float64}([0.2533321381291593, -0.5194986426167724, -0.816053912502256])), Node{3, Float64}(Vec{3, Float64}([0.4746165702604443, 0.5196832012319649, 0.7104002263453397])), Node{3, Float64}(Vec{3, Float64}([0.1794310196242874, 0.4693963227069368, 0.86456439981403])), Node{3, Float64}(Vec{3, Float64}([0.4549014889623809, -0.8896283518779415, -0.04032407314181124])), Node{3, Float64}(Vec{3, Float64}([0.5334972857945512, -0.5064666913889904, -0.6774010160631116])), Node{3, Float64}(Vec{3, Float64}([0.3299386131026945, -0.7304111183526599, -0.5980301913538204])), Node{3, Float64}(Vec{3, Float64}([0.8702062666223009, 0.4902724104444173, -0.0487238862191618])), Node{3, Float64}(Vec{3, Float64}([0.6985731805597851, 0.7142697866770318, 0.04259323001291791])), Node{3, Float64}(Vec{3, Float64}([0.2296843115287244, 0.7082599887008079, 0.6675424371851632])), Node{3, Float64}(Vec{3, Float64}([0.7069936913703737, 0.6602762528044178, -0.25336769791165])), Node{3, Float64}(Vec{3, Float64}([0.5046140344474411, 0.847753185318715, -0.1633377268748682])), Node{3, Float64}(Vec{3, Float64}([0.4459016531317898, 0.8671684464372166, 0.2217895426705266])), Node{3, Float64}(Vec{3, Float64}([0.1957393008348495, -0.9778799588436223, 0.07373542025837701])), Node{3, Float64}(Vec{3, Float64}([0.132948405405323, -0.9163556806890073, 0.377646644323987])), Node{3, Float64}(Vec{3, Float64}([-0.04078294352825544, -0.5000378079804607, 0.8650427400465639])), Node{3, Float64}(Vec{3, Float64}([-0.15879096852963, -0.2269691626539187, 0.9608696204572195])), Node{3, Float64}(Vec{3, Float64}([-0.0627822729549371, 0.6521448166384469, 0.7554902542946654])), Node{3, Float64}(Vec{3, Float64}([-0.00810393003187733, 0.8557402770446653, 0.5173421542476102])), Node{3, Float64}(Vec{3, Float64}([-0.303927994070528, 0.7442868971468831, 0.5946972247755409])), Node{3, Float64}(Vec{3, Float64}([-0.1005857430240445, -0.9805320120393182, 0.1686400950735836])), Node{3, Float64}(Vec{3, Float64}([-0.250312169949072, 0.9087344998521109, 0.3339841708134095])), Node{3, Float64}(Vec{3, Float64}([-0.5249866990376768, 0.7644318034931047, 0.3742098123269927])), Node{3, Float64}(Vec{3, Float64}([-0.4519233842103236, 0.8869049507643479, 0.09573329156347832])), Node{3, Float64}(Vec{3, Float64}([-0.3496351647243795, -0.4195763861086914, 0.8376818655122756])), Node{3, Float64}(Vec{3, Float64}([0.03514175063573507, -0.712088294611358, -0.7012098958512663])), Node{3, Float64}(Vec{3, Float64}([-0.5578090220966426, 0.5621381566949251, 0.6106142707595517])), Node{3, Float64}(Vec{3, Float64}([-0.7517046929582519, 0.5490049396020039, 0.3654225374510175])), Node{3, Float64}(Vec{3, Float64}([-0.7516770591270084, 0.3188376499659225, 0.5773423176473207])), Node{3, Float64}(Vec{3, Float64}([-0.9078594242555867, 0.2839340396968504, 0.308500772919197])), Node{3, Float64}(Vec{3, Float64}([-0.8729743723417194, 0.4810256495227656, 0.08080884689056374])), Node{3, Float64}(Vec{3, Float64}([-0.9781767908615765, 0.2072992377015003, 0.01404250220312223])), Node{3, Float64}(Vec{3, Float64}([-0.8971795561961635, 0.3901597641193664, -0.2069884112842441])), Node{3, Float64}(Vec{3, Float64}([-0.9548315645414797, 0.1004649748246536, -0.2796488372740924])), Node{3, Float64}(Vec{3, Float64}([-0.8206862560040664, 0.2795690009485128, -0.4983123949037174])), Node{3, Float64}(Vec{3, Float64}([-0.9944324272272498, -0.09795994042506151, -0.03883294671846241])), Node{3, Float64}(Vec{3, Float64}([-0.9222459365616031, -0.2071687888868163, -0.3264100571471125])), Node{3, Float64}(Vec{3, Float64}([0.1834719611680492, 0.5010291323794294, -0.8457587409966664])), Node{3, Float64}(Vec{3, Float64}([-0.91361990091357, -0.3989235422328132, -0.07847728401966728])), Node{3, Float64}(Vec{3, Float64}([-0.7955325746014653, -0.491919372526284, -0.3537559238815812])), Node{3, Float64}(Vec{3, Float64}([-0.7611350028438446, -0.2826413132177686, -0.5837699851040954])), Node{3, Float64}(Vec{3, Float64}([-0.9376616866552163, -0.2782070648190273, 0.2083060019866838])), Node{3, Float64}(Vec{3, Float64}([-0.8105616108825711, -0.5611756084770717, 0.167546445542243])), Node{3, Float64}(Vec{3, Float64}([-0.7138470175755108, 0.5780614864020698, -0.3953066574662994])), Node{3, Float64}(Vec{3, Float64}([-0.6051533012954252, 0.4204977029517603, -0.6759964228777704])), Node{3, Float64}(Vec{3, Float64}([-0.464381110892345, 0.6786288794782291, -0.5690457167789902])), Node{3, Float64}(Vec{3, Float64}([0.1877443329604412, 0.734160027560642, -0.6525037313099415])), Node{3, Float64}(Vec{3, Float64}([-0.170160273810633, 0.9844745574140952, 0.04307350718262549])), Node{3, Float64}(Vec{3, Float64}([-0.5249321356083022, 0.3098710149269829, 0.7927333770655985])), Node{3, Float64}(Vec{3, Float64}([-0.5953716525426767, -0.5479615533534468, -0.5875974228969015])), Node{3, Float64}(Vec{3, Float64}([-0.5948775141882189, -0.731153543534381, -0.3339689190484101])), Node{3, Float64}(Vec{3, Float64}([-0.5390479091791861, -0.3243867630844813, -0.7773034025045308])), Node{3, Float64}(Vec{3, Float64}([-0.0520370919307315, -0.9844854839200972, -0.1675722919041359])), Node{3, Float64}(Vec{3, Float64}([-0.6990561222536326, 0.04743990203771749, 0.7134914110445663])), Node{3, Float64}(Vec{3, Float64}([-0.1709321209591976, -0.8735796289436984, 0.4556762468233124])), Node{3, Float64}(Vec{3, Float64}([-0.7974897652646338, -0.4017982288808797, 0.4500758353503858])), Node{3, Float64}(Vec{3, Float64}([-0.3862300653530193, -0.892831085675539, 0.2316872656596398])), Node{3, Float64}(Vec{3, Float64}([-0.4483350138760702, -0.7375533246169005, 0.5049859489919507])), Node{3, Float64}(Vec{3, Float64}([-0.3297241885467164, 0.509198624068942, -0.7949834719876292])), Node{3, Float64}(Vec{3, Float64}([-0.5006088199586549, 0.2260636929674356, -0.8356350974567357])), Node{3, Float64}(Vec{3, Float64}([-0.114341460189287, 0.3765549448176345, 0.9193108310115626])), Node{3, Float64}(Vec{3, Float64}([-0.3640768444247161, 0.9138220136269561, -0.1799371522629953])), Node{3, Float64}(Vec{3, Float64}([-0.07438705466455738, 0.9677528189890058, -0.2406679194183651])), Node{3, Float64}(Vec{3, Float64}([-0.3648584408113792, -0.7551083151164547, -0.5446923449165394])), Node{3, Float64}(Vec{3, Float64}([0.4869006321121222, 0.7190276434148181, 0.4959102967817358])), Node{3, Float64}(Vec{3, Float64}([-0.1521295446889728, 0.2979596432036986, -0.9423781898233057])), Node{3, Float64}(Vec{3, Float64}([-0.2544190872670957, 0.003318804331989557, -0.9670883690604412])), Node{3, Float64}(Vec{3, Float64}([-0.4574608311337778, 0.04016692189285442, 0.8883221298403223])), Node{3, Float64}(Vec{3, Float64}([0.05162779183626617, -0.7587722997293148, 0.6493066827575379])), Node{3, Float64}(Vec{3, Float64}([0.4718555144772151, 0.7467039305053169, -0.4688129836356428])), Node{3, Float64}(Vec{3, Float64}([-0.6603962997927848, -0.03746342128023257, -0.7499821459781414])), Node{3, Float64}(Vec{3, Float64}([-0.8755766085628751, -0.1265053019308967, 0.4662209895756586])), Node{3, Float64}(Vec{3, Float64}([-0.6181791088052646, 0.7728275785374294, -0.1434995584965406])), Node{3, Float64}(Vec{3, Float64}([-0.1690313656792333, 0.7375323982092609, -0.6538152330806537])), Node{3, Float64}(Vec{3, Float64}([0.1200196207970379, -0.8918575867551481, -0.436102437015684])), Node{3, Float64}(Vec{3, Float64}([0.1687644519228687, 0.9855263372163161, 0.01601244578962911])), Node{3, Float64}(Vec{3, Float64}([-0.3483879170786434, -0.8995293935105305, -0.2635767998974518])), Node{3, Float64}(Vec{3, Float64}([-0.5764928164425412, -0.8170915372428317, -0.004177601739351213])), Node{3, Float64}(Vec{3, Float64}([0.1882506182999614, 0.9293683913062556, 0.3175470011675514])), Node{3, Float64}(Vec{3, Float64}([0.6134454888565073, -0.6587663452922019, -0.4355588760569071])), Node{3, Float64}(Vec{3, Float64}([0.2249597314763762, 0.912022857110095, -0.3429393930752427])), Node{3, Float64}(Vec{3, Float64}([-0.5648047232459188, -0.2119475694624456, 0.7975423828224195])), Node{3, Float64}(Vec{3, Float64}([-0.5794573587738784, -0.4650165308383579, 0.6693196511457432])), Node{3, Float64}(Vec{3, Float64}([-0.2366091774971593, -0.673742809876049, 0.7000619424482694])), Node{3, Float64}(Vec{3, Float64}([0.8527104539816098, -0.2459350607989368, 0.4608696426759959])), Node{3, Float64}(Vec{3, Float64}([0.6960448696791582, -0.2371008564340713, -0.6777202396797322])), Node{3, Float64}(Vec{3, Float64}([0.7383552949632746, -0.4356623338363972, -0.5148104401388143])), Node{3, Float64}(Vec{3, Float64}([0.6972157319333021, 0.5281952846001349, -0.4846647959888281])), Node{3, Float64}(Vec{3, Float64}([0.347292924577952, -0.7337483028081979, 0.5839529541531424])), Node{3, Float64}(Vec{3, Float64}([0.6950102695017686, 0.5301053528082009, 0.4857458596953471])), Node{3, Float64}(Vec{3, Float64}([0.6829752857073232, -0.715076601189415, -0.1490309147270943])), Node{3, Float64}(Vec{3, Float64}([0.4146754880735923, -0.8482261971288859, -0.3294792225546194])), Node{3, Float64}(Vec{3, Float64}([0.6438850005135908, 0.699438384671586, 0.3101581083280197])), Node{3, Float64}(Vec{3, Float64}([-0.297254111478026, 0.5256842530929838, 0.7970546149790998])), Node{3, Float64}(Vec{3, Float64}([0.2379496082268838, -0.9521921223690982, -0.1915989197331362])), Node{3, Float64}(Vec{3, Float64}([-0.7701004523871441, -0.6262692692633408, -0.1213758444233331])), Node{3, Float64}(Vec{3, Float64}([-0.04870127384665793, -0.4702806835042472, -0.8811720970664533])), Node{3, Float64}(Vec{3, Float64}([-0.3330278774171408, -0.5614481759300539, -0.7575410078720815])), Node{3, Float64}(Vec{3, Float64}([-0.9689297499821217, 0.02104148294224663, 0.2464394359577509])), Node{3, Float64}(Vec{3, Float64}([-0.846843367254934, 0.005714507259744244, -0.5318116731918389])), Node{3, Float64}(Vec{3, Float64}([-0.04746359565270164, 0.5900070474485388, -0.8060017934525794])), Node{3, Float64}(Vec{3, Float64}([-0.6986480461733326, 0.7071703312001933, 0.1086325469111062])), Node{3, Float64}(Vec{3, Float64}([0.8661092531030132, -0.2422987088950967, -0.4372025815993196])), Node{3, Float64}(Vec{3, Float64}([0.5402416852612612, -0.4857275826755379, 0.6871736584985276])), Node{3, Float64}(Vec{3, Float64}([-0.5959480054569645, -0.7520023710628726, 0.2816707452109351])), Node{3, Float64}(Vec{3, Float64}([0.952973978467038, 0.2564234474475258, -0.1615165996541267])), Node{3, Float64}(Vec{3, Float64}([-0.01462904509434265, 0.877618127075472, -0.4791371558000571])), Node{3, Float64}(Vec{3, Float64}([-0.3034152571707645, -0.286217973431629, -0.9088555734552604])), Node{3, Float64}(Vec{3, Float64}([-0.3017858446842533, -0.953352179764715, -0.006702632772165666])), Node{3, Float64}(Vec{3, Float64}([0.09058624877843947, 0.1905528950128461, 0.9774884785686602])), Node{3, Float64}(Vec{3, Float64}([-0.1973201026088886, 0.08799498112396965, 0.9763819234313025])), Node{3, Float64}(Vec{3, Float64}([-0.2878703617800117, 0.8529298840108065, -0.4354782058495664])), Node{3, Float64}(Vec{3, Float64}([0.149818136421478, 0.3047344838543294, -0.9405803635783765])), Node{3, Float64}(Vec{3, Float64}([-0.7314557619932112, -0.2478245862327181, 0.6352601378219105])), Node{3, Float64}(Vec{3, Float64}([-0.1375827891332612, -0.8707453819315426, -0.4720947531790674])), Node{3, Float64}(Vec{3, Float64}([-0.3433904648122909, 0.2222815344623098, 0.9125096756271025])), Node{3, Float64}(Vec{3, Float64}([0.7251853405213533, -0.4530639739871879, 0.5184971141364874])), Node{3, Float64}(Vec{3, Float64}([-0.4601950358024463, -0.1083766469907528, -0.8811782063861016])), Node{3, Float64}(Vec{3, Float64}([-0.0502277688492161, -0.2892680239368302, -0.9559294856651881])), Node{3, Float64}(Vec{3, Float64}([-0.7104189493493915, 0.1859998577119419, -0.6787554562111777])), Node{3, Float64}(Vec{3, Float64}([-0.8606326124626713, 0.126065665070423, 0.493375064688143])), Node{3, Float64}(Vec{3, Float64}([-0.7897543446414333, 0.6004310913334062, -0.1255809686224593])), Node{3, Float64}(Vec{3, Float64}([-0.507050404155998, 0.7824991382674806, -0.3613792831027939])), Node{3, Float64}(Vec{3, Float64}([-0.6438413033196639, -0.602298941313687, 0.471915629569575])), Node{3, Float64}(Vec{3, Float64}([-0.03553269700960936, 0.9642933100142027, 0.2624420692363861])), Node{3, Float64}(Vec{3, Float64}([0.8430492816075711, 0.4544336531682183, -0.2876768389167709])), Node{3, Float64}(Vec{3, Float64}([0.2860415446647247, 0.828462800035671, 0.4814868883810587])), Node{3, Float64}(Vec{3, Float64}([-0.1824585577315876, -0.7135091380548476, -0.6764714218817652])), Node{3, Float64}(Vec{3, Float64}([-0.3917812796843447, -0.2012538866168797, 0.8977774234243683]))]

## We start by setting up grid, dof handler and the matrices for the heat problem.
grid = Grid(elements, nodes);

ip = Lagrange{RefTriangle, 1}()
ip_geo = Lagrange{RefTriangle, 1}()
qr = QuadratureRule{2, RefTriangle}(2)
cellvalues = CellValues(qr, ip, ip_geo^3);

dh = DofHandler(grid);
add!(dh, :reactants, ip^2);
close!(dh);

M = create_sparsity_pattern(dh; coupling=[true false;false true])
D = create_sparsity_pattern(dh; coupling=[true false;false true])
assemble_matrices!(M, D, cellvalues, dh);

## Since the heat problem is linear and has no time dependent parameters, we precompute the
## decomposition of the system matrix to speed up the linear system solver.
A = M + Δt .* D
Alu = cholesky(A)

## Now we setup buffers for the time dependent solution and fill the initial condition.
uₜ   = zeros(ndofs(dh))
uₜ₋₁ = ones(ndofs(dh))
setup_initial_conditions!(uₜ₋₁, cellvalues, dh)

## And prepare output for visualization.
pvd = paraview_collection("reactive-surface.pvd");
vtk_grid("reactive-surface-0.0.vtu", dh) do vtk
    vtk_point_data(vtk, dh, uₜ₋₁)
    vtk_save(vtk)
    pvd[0.0] = vtk
end

## This is now the main solve loop.
for (iₜ, t) ∈ enumerate(Δt:Δt:T)
    ## First we solve the heat problem
    uₜ .= Alu \ (M * uₜ₋₁)

    ## Then we solve the point-wise reaction problem with the solution of
    ## the heat problem as initial guess.
    rvₜ = reshape(uₜ, (2, length(grid.nodes)))
    for i ∈ 1:length(grid.nodes)
        r₁ = rvₜ[1, i]
        r₂ = rvₜ[2, i]
        rvₜ[1, i] += Δt*( -r₁*r₂^2 + F *(1 - r₁) )
        rvₜ[2, i] += Δt*(  r₁*r₂^2 - r₂*(F + k ) )
    end

    ## The solution is then stored every 10th step to vtk files for
    ## later visualization purposes.
    if (iₜ % 10) == 0
        vtk_grid("reactive-surface-$t.vtu", dh) do vtk
            vtk_point_data(vtk, dh, uₜ)
            vtk_save(vtk)
            pvd[t] = vtk
        end
    end

    ## Finally we totate the solution to initialize the next timestep.
    uₜ₋₁ .= uₜ
end

vtk_save(pvd);

end

## This parametrization gives the spot pattern shown in the gif above.
if false #src
gray_scott_sphere(0.06, 0.062, 10.0, 32000.0)
else #src
gray_scott_sphere(0.06, 0.062, 10.0, 20.0)
end #src

#md # ## [Plain program](@id reactive_surface-plain-program)
#md #
#md # Here follows a version of the program without any comments.
#md # The file is also available here: [`reactive_surface.jl`](reactive_surface.jl).
#md #
#md # ```julia
#md # @__CODE__
#md # ```
